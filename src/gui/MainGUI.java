package gui;

import entity.NhanVien; // C·∫ßn import NhanVien
import entity.VaiTro;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.LinkedHashMap;
import java.util.Map;

public class MainGUI extends JFrame {
    // --- Constants ---
    private static final Color COLOR_ACCENT_BLUE = new Color(56, 118, 243);
    private static final Color COLOR_BUTTON_ACTIVE = new Color(40, 28, 244);

    // --- UI Components ---
    private final CardLayout cardLayout = new CardLayout();
    private final JPanel mainContentPanel = new JPanel(cardLayout);
    private final Map<String, JPanel> menuButtons = new LinkedHashMap<>(); // Gi·ªØ th·ª© t·ª± n√∫t menu
    private JPanel currentActiveButton = null; // N√∫t menu ƒëang ƒë∆∞·ª£c ch·ªçn

    // --- User Information ---
    private final String userRole; // Vai tr√≤ (String: "QUANLY" or "NHANVIEN")
    private final String userName; // T√™n hi·ªÉn th·ªã
    private final String maNVDangNhap; // M√£ nh√¢n vi√™n ƒëƒÉng nh·∫≠p

    // --- Child Panels ---
    private DanhSachBanGUI danhSachBanGUI; // Panel qu·∫£n l√Ω b√†n (cho nh√¢n vi√™n)
    private KhachHangGUI khachHangGUI;   // Panel qu·∫£n l√Ω kh√°ch h√†ng (cho nh√¢n vi√™n)
    // Khai b√°o c√°c panel kh√°c n·∫øu c·∫ßn truy c·∫≠p t·ª´ MainGUI

    /**
     * Constructor ch√≠nh, nh·∫≠n vai tr√≤, t√™n v√† m√£ nh√¢n vi√™n.
     * @param userRole String ƒë·∫°i di·ªán vai tr√≤ ("QUANLY" ho·∫∑c "NHANVIEN")
     * @param userName T√™n hi·ªÉn th·ªã c·ªßa ng∆∞·ªùi d√πng
     * @param maNVDangNhap M√£ nh√¢n vi√™n ƒëƒÉng nh·∫≠p
     */
    public MainGUI(String userRole, String userName, String maNVDangNhap) {
        this.userRole = userRole;
        this.userName = userName;
        this.maNVDangNhap = maNVDangNhap; // L∆∞u m√£ NV

        // --- C√†i ƒë·∫∑t c·ª≠a s·ªï ch√≠nh ---
        setTitle("StarGuardian Restaurant - Qu·∫£n l√Ω Nh√† h√†ng"); // ƒê·ªïi ti√™u ƒë·ªÅ n·∫øu c·∫ßn
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // CƒÉn gi·ªØa m√†n h√¨nh khi m·ªü
        getRootPane().setBorder(BorderFactory.createEmptyBorder()); // B·ªè vi·ªÅn m·∫∑c ƒë·ªãnh c·ªßa JFrame
        setLayout(new BorderLayout(0, 0)); // Layout ch√≠nh kh√¥ng c√≥ kho·∫£ng c√°ch

        // ===== T·∫†O C√ÅC TH√ÄNH PH·∫¶N GIAO DI·ªÜN =====
        JPanel menuPanel = createMenuPanel();           // T·∫°o menu b√™n tr√°i
        setupMainContentPanel();                        // Kh·ªüi t·∫°o c√°c panel n·ªôi dung ch√≠nh
        JPanel contentWrapperPanel = new JPanel(new BorderLayout()); // Panel bao b·ªçc n·ªôi dung v√† header
        contentWrapperPanel.add(createHeaderPanel(), BorderLayout.NORTH); // Th√™m header ·ªü tr√™n
        contentWrapperPanel.add(mainContentPanel, BorderLayout.CENTER);   // Th√™m panel n·ªôi dung ·ªü gi·ªØa

        // --- Th√™m menu v√† n·ªôi dung v√†o JFrame ---
        add(menuPanel, BorderLayout.WEST);
        add(contentWrapperPanel, BorderLayout.CENTER);

        // --- M·ªü r·ªông c·ª≠a s·ªï ra to√†n m√†n h√¨nh ---
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        // Hi·ªÉn th·ªã m√†n h√¨nh ch√≠nh (Dashboard) m·∫∑c ƒë·ªãnh
        showCard("M√†n h√¨nh ch√≠nh");
    }

    /**
     * Constructor ph·ª• (n·∫øu kh√¥ng truy·ªÅn m√£ NV, v√≠ d·ª• cho m·ª•c ƒë√≠ch test).
     * @param userRole String ƒë·∫°i di·ªán vai tr√≤
     * @param userName T√™n hi·ªÉn th·ªã
     */
    public MainGUI(String userRole, String userName) {
        this(userRole, userName, null); // G·ªçi constructor ch√≠nh v·ªõi maNVDangNhap l√† null
    }


    /**
     * T·∫°o panel header hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng.
     * @return JPanel header
     */
    private JPanel createHeaderPanel() {
        JPanel headerContainer = new JPanel(new BorderLayout());
        headerContainer.setBackground(Color.WHITE);
        headerContainer.setBorder(new EmptyBorder(0, 10, 0, 0)); // L·ªÅ tr√°i
        headerContainer.setPreferredSize(new Dimension(0, 50)); // Chi·ªÅu cao c·ªë ƒë·ªãnh

        // Panel v·∫Ω thanh m√†u xanh bo g√≥c
        JPanel blueBarPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(COLOR_ACCENT_BLUE);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20); // Bo g√≥c 20px
            }
        };
        blueBarPanel.setOpaque(false); // ƒê·ªÉ v·∫Ω ƒë∆∞·ª£c bo g√≥c

        // Panel th√¥ng tin ng∆∞·ªùi d√πng (n·ªÅn tr·∫Øng, bo g√≥c, vi·ªÅn x√°m)
        JPanel userInfoPanel = new JPanel(new BorderLayout(10, 0)) { // Kho·∫£ng c√°ch ngang 10px
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                // V·∫Ω n·ªÅn tr·∫Øng bo g√≥c
                g2d.setColor(Color.WHITE);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                // V·∫Ω vi·ªÅn x√°m nh·∫°t bo g√≥c
                g2d.setColor(new Color(220, 220, 220));
                g2d.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 20, 20);
            }
        };
        userInfoPanel.setOpaque(false);
        userInfoPanel.setBorder(new EmptyBorder(5, 10, 5, 15)); // Padding b√™n trong
        userInfoPanel.setPreferredSize(new Dimension(210, 0)); // Chi·ªÅu r·ªông c·ªë ƒë·ªãnh

        // Icon ng∆∞·ªùi d√πng
        JLabel userIconLabel;
        try {
            // C·ªë g·∫Øng t·∫£i icon t·ª´ resources
            ImageIcon userIcon = new ImageIcon(getClass().getResource("/img/user_icon.png")); // ƒê·∫£m b·∫£o c√≥ file n√†y
            // Ki·ªÉm tra xem icon c√≥ t·∫£i ƒë∆∞·ª£c kh√¥ng
            if (userIcon.getImageLoadStatus() == MediaTracker.COMPLETE) {
                Image scaledImage = userIcon.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH);
                userIconLabel = new JLabel(new ImageIcon(scaledImage));
            } else {
                throw new Exception("Icon not loaded"); // N√©m l·ªói n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c
            }
        } catch (Exception e) {
            // N·∫øu l·ªói, d√πng k√Ω t·ª± thay th·∫ø
            System.err.println("Kh√¥ng t√¨m th·∫•y user_icon.png, d√πng k√Ω t·ª± thay th·∫ø.");
            userIconLabel = new JLabel("üë§"); // K√Ω t·ª± ng∆∞·ªùi d√πng
            userIconLabel.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 24)); // Font h·ªó tr·ª£ k√Ω t·ª±
        }

        // Panel ch·ª©a T√™n v√† Vai tr√≤ (x·∫øp d·ªçc)
        JPanel textPanel = new JPanel();
        textPanel.setOpaque(false);
        textPanel.setLayout(new BoxLayout(textPanel, BoxLayout.Y_AXIS)); // X·∫øp d·ªçc
        JLabel nameLabel = new JLabel(this.userName != null ? this.userName : "N/A"); // Hi·ªÉn th·ªã t√™n (c√≥ ki·ªÉm tra null)
        nameLabel.setFont(new Font("Arial", Font.BOLD, 14));
        nameLabel.setForeground(Color.BLACK);
        JLabel roleLabel = new JLabel(this.userRole != null ? this.userRole : "N/A"); // Hi·ªÉn th·ªã vai tr√≤ (c√≥ ki·ªÉm tra null)
        roleLabel.setForeground(Color.DARK_GRAY); // M√†u ch·ªØ x√°m ƒë·∫≠m h∆°n
        textPanel.add(nameLabel);
        textPanel.add(roleLabel);

        // G·∫Øn icon v√† text v√†o userInfoPanel
        userInfoPanel.add(userIconLabel, BorderLayout.WEST);
        userInfoPanel.add(textPanel, BorderLayout.CENTER);

        // G·∫Øn userInfoPanel v√†o blueBarPanel (cƒÉn ph·∫£i)
        blueBarPanel.add(userInfoPanel, BorderLayout.EAST);
        // G·∫Øn blueBarPanel v√†o headerContainer
        headerContainer.add(blueBarPanel, BorderLayout.CENTER);

        return headerContainer;
    }

    /**
     * T·∫°o panel menu b√™n tr√°i v·ªõi logo v√† c√°c n√∫t ch·ª©c nƒÉng.
     * @return JPanel menu
     */
    private JPanel createMenuPanel() {
        JPanel menuPanel = new JPanel();
        menuPanel.setLayout(new BoxLayout(menuPanel, BoxLayout.Y_AXIS)); // X·∫øp d·ªçc
        menuPanel.setBackground(COLOR_ACCENT_BLUE);
        menuPanel.setPreferredSize(new Dimension(220, 0)); // Chi·ªÅu r·ªông c·ªë ƒë·ªãnh
        menuPanel.setBorder(new EmptyBorder(10, 0, 10, 0)); // Padding tr√™n d∆∞·ªõi

        // --- Logo ---
        try {
            ImageIcon originalIcon = new ImageIcon(getClass().getResource("/img/DangNhap+Logo/Logo.jpg")); // ƒê∆∞·ªùng d·∫´n logo
            Image originalImage = originalIcon.getImage();
            // Thay ƒë·ªïi k√≠ch th∆∞·ªõc logo n·∫øu c·∫ßn
            Image resizedImage = originalImage.getScaledInstance(180, 140, Image.SCALE_SMOOTH); // V√≠ d·ª•: 180x140
            ImageIcon resizedIcon = new ImageIcon(resizedImage);
            JLabel logoLabel = new JLabel(resizedIcon);
            logoLabel.setAlignmentX(Component.CENTER_ALIGNMENT); // CƒÉn gi·ªØa logo
            menuPanel.add(logoLabel);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 20))); // Kho·∫£ng c√°ch d∆∞·ªõi logo
        } catch (Exception e) {
            System.err.println("L·ªói t·∫£i logo: " + e.getMessage());
            // C√≥ th·ªÉ th√™m JLabel hi·ªÉn th·ªã l·ªói thay th·∫ø logo
            JLabel errorLabel = new JLabel("L·ªói t·∫£i logo");
            errorLabel.setForeground(Color.WHITE);
            errorLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            menuPanel.add(errorLabel);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        }

        // --- C√°c n√∫t ch·ª©c nƒÉng ---
        LinkedHashMap<String, String> menuItems = new LinkedHashMap<>();
        // X√°c ƒë·ªãnh c√°c m·ª•c menu d·ª±a tr√™n vai tr√≤ ng∆∞·ªùi d√πng
        if ("QUANLY".equalsIgnoreCase(this.userRole)) { // D√πng equalsIgnoreCase cho an to√†n
            menuItems.put("M√†n h√¨nh ch√≠nh", "‚åÇ");      // K√Ω t·ª± Home
            menuItems.put("Danh m·ª•c m√≥n ƒÉn", "üçΩÔ∏è"); // K√Ω t·ª± dao nƒ©a
            menuItems.put("L·ªãch l√†m vi·ªác", "üìÖ");   // K√Ω t·ª± l·ªãch
            menuItems.put("Khuy·∫øn m√£i", "üè∑Ô∏è");     // K√Ω t·ª± tag
            menuItems.put("H√≥a ƒë∆°n", "üßæ");        // K√Ω t·ª± h√≥a ƒë∆°n
            menuItems.put("Nh√¢n vi√™n", "üë•");      // K√Ω t·ª± nh√≥m ng∆∞·ªùi (thay v√¨ 1 ng∆∞·ªùi)
        } else if ("NHANVIEN".equalsIgnoreCase(this.userRole)) {
            menuItems.put("M√†n h√¨nh ch√≠nh", "‚åÇ");
            menuItems.put("Danh s√°ch b√†n", "ü™ë");    // K√Ω t·ª± gh·∫ø
            menuItems.put("Th√†nh vi√™n", "üßë");       // K√Ω t·ª± ng∆∞·ªùi l·ªõn
            menuItems.put("L·ªãch l√†m vi·ªác", "üìÖ");
            menuItems.put("H√≥a ƒë∆°n", "üßæ");
        }
        // N√∫t ƒêƒÉng xu·∫•t lu√¥n c√≥
        menuItems.put("ƒêƒÉng xu·∫•t", "üö™"); // K√Ω t·ª± c·ª≠a ra

        // T·∫°o v√† th√™m c√°c n√∫t v√†o menuPanel
        for (Map.Entry<String, String> entry : menuItems.entrySet()) {
            JPanel button = createMenuButton(entry.getKey(), entry.getValue());
            menuButtons.put(entry.getKey(), button); // L∆∞u l·∫°i ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i active
            menuPanel.add(button);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 1))); // Kho·∫£ng c√°ch nh·ªè gi·ªØa c√°c n√∫t
        }

        menuPanel.add(Box.createVerticalGlue()); // ƒê·∫©y c√°c n√∫t l√™n tr√™n n·∫øu c√≤n tr·ªëng

        return menuPanel;
    }

    /**
     * T·∫°o m·ªôt n√∫t b·∫•m cho menu b√™n tr√°i.
     * @param text T√™n ch·ª©c nƒÉng hi·ªÉn th·ªã
     * @param iconChar K√Ω t·ª± icon (c√≥ th·ªÉ l√† Emoji ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát)
     * @return JPanel ho·∫°t ƒë·ªông nh∆∞ m·ªôt n√∫t b·∫•m
     */
    private JPanel createMenuButton(String text, String iconChar) {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 12)); // CƒÉn tr√°i, padding
        buttonPanel.setBackground(COLOR_ACCENT_BLUE);
        buttonPanel.setMaximumSize(new Dimension(220, 50)); // Chi·ªÅu cao c·ªë ƒë·ªãnh
        buttonPanel.setCursor(new Cursor(Cursor.HAND_CURSOR)); // ƒê·ªïi con tr·ªè khi r√™ chu·ªôt
        // buttonPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.WHITE)); // B·ªè border

        // Icon
        if (iconChar != null && !iconChar.isEmpty()) {
            JLabel iconLabel = new JLabel(iconChar);
            iconLabel.setForeground(Color.WHITE);
            iconLabel.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 18)); // Font h·ªó tr·ª£ k√Ω t·ª± ƒë·∫∑c bi·ªát
            buttonPanel.add(iconLabel);
        }

        // Text
        JLabel label = new JLabel(text);
        label.setForeground(Color.WHITE);
        label.setFont(new Font("Arial", Font.BOLD, 14));
        buttonPanel.add(label);

        // --- X·ª≠ l√Ω s·ª± ki·ªán Click v√† Hover ---
        buttonPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // X·ª≠ l√Ω khi b·∫•m n√∫t
                if ("ƒêƒÉng xu·∫•t".equals(text)) {
                    // Hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n ƒëƒÉng xu·∫•t
                    int choice = JOptionPane.showConfirmDialog(
                            MainGUI.this,
                            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?",
                            "X√°c nh·∫≠n ƒëƒÉng xu·∫•t",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE
                    );
                    // N·∫øu ng∆∞·ªùi d√πng ch·ªçn Yes
                    if (choice == JOptionPane.YES_OPTION) {

                        // --- S·ª¨A: G·ªçi h√†m ƒë√≥ng k·∫øt n·ªëi CSDL ---
                        connectDB.SQLConnection.closeConnection(); // ƒê√≥ng k·∫øt n·ªëi Singleton
                        // --- K·∫æT TH√öC S·ª¨A ---

                        dispose(); // ƒê√≥ng c·ª≠a s·ªï MainGUI hi·ªán t·∫°i
                        // M·ªü l·∫°i c·ª≠a s·ªï ƒëƒÉng nh·∫≠p (TaiKhoanGUI)
                        SwingUtilities.invokeLater(() -> {
                            new TaiKhoanGUI().setVisible(true);
                        });
                    }
                } else {
                    // N·∫øu kh√¥ng ph·∫£i n√∫t ƒêƒÉng xu·∫•t, chuy·ªÉn sang card t∆∞∆°ng ·ª©ng
                    showCard(text);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                // ƒê·ªïi m√†u n·ªÅn khi r√™ chu·ªôt v√†o (n·∫øu n√∫t ƒë√≥ kh√¥ng ph·∫£i l√† n√∫t ƒëang active)
                if (buttonPanel != currentActiveButton) {
                    buttonPanel.setBackground(COLOR_BUTTON_ACTIVE.brighter()); // M√†u s√°ng h∆°n m√†u active
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                // Tr·∫£ l·∫°i m√†u n·ªÅn m·∫∑c ƒë·ªãnh khi r√™ chu·ªôt ra (n·∫øu n√∫t ƒë√≥ kh√¥ng ph·∫£i l√† n√∫t ƒëang active)
                if (buttonPanel != currentActiveButton) {
                    buttonPanel.setBackground(COLOR_ACCENT_BLUE);
                }
            }
        });

        return buttonPanel;
    }

    /**
     * Kh·ªüi t·∫°o c√°c panel con v√† th√™m ch√∫ng v√†o CardLayout c·ªßa mainContentPanel.
     */
    private void setupMainContentPanel() {
        // --- Panel chung cho m·ªçi vai tr√≤ ---
        mainContentPanel.add(new DashboardGUI(), "M√†n h√¨nh ch√≠nh"); // Panel Dashboard

        VaiTro vaiTroEnum; // Chuy·ªÉn String role th√†nh Enum VaiTro
        if (this.userRole != null && this.userRole.equalsIgnoreCase("QUANLY")) {
            vaiTroEnum = VaiTro.QUANLY;
        } else {
            vaiTroEnum = VaiTro.NHANVIEN; // M·∫∑c ƒë·ªãnh l√† nh√¢n vi√™n n·∫øu kh√¥ng ph·∫£i qu·∫£n l√Ω
        }
        // Panel L·ªãch l√†m vi·ªác (chung)
        mainContentPanel.add(new LichLamViecGUI(vaiTroEnum), "L·ªãch l√†m vi·ªác");
        // Panel H√≥a ƒë∆°n (chung)
        mainContentPanel.add(new HoaDonGUI(), "H√≥a ƒë∆°n");

        // --- Panels ch·ªâ d√†nh cho Qu·∫£n l√Ω ---
        if (VaiTro.QUANLY == vaiTroEnum) {
            // <<< --- S·ª¨A ·ªû ƒê√ÇY --- >>>
            // Thay th·∫ø placeholder b·∫±ng class GUI th·∫≠t
            mainContentPanel.add(new DanhMucMonGUI(), "Danh m·ª•c m√≥n ƒÉn");
            // <<< --- K·∫æT TH√öC S·ª¨A --- >>>

            mainContentPanel.add(new KhuyenMaiGUI(), "Khuy·∫øn m√£i");
            mainContentPanel.add(new NhanVienGUI(), "Nh√¢n vi√™n");
        }
        // --- Panels ch·ªâ d√†nh cho Nh√¢n vi√™n ---
        else if (VaiTro.NHANVIEN == vaiTroEnum) {
            // Kh·ªüi t·∫°o v√† th√™m DanhSachBanGUI (truy·ªÅn m√£ NV)
            this.danhSachBanGUI = new DanhSachBanGUI(this, this.maNVDangNhap);
            mainContentPanel.add(danhSachBanGUI, "Danh s√°ch b√†n");
            // Kh·ªüi t·∫°o v√† th√™m KhachHangGUI
            this.khachHangGUI = new KhachHangGUI();
            mainContentPanel.add(this.khachHangGUI, "Th√†nh vi√™n");
        }
    }


    /**
     * L√†m m·ªõi d·ªØ li·ªáu tr√™n m√†n h√¨nh qu·∫£n l√Ω kh√°ch h√†ng (Th√†nh vi√™n).
     * ƒê∆∞·ª£c g·ªçi t·ª´ c√°c panel con (v√≠ d·ª•: ManHinhDatBanGUI) khi c·∫ßn c·∫≠p nh·∫≠t.
     */
    public void refreshKhachHangScreen() {
        if (khachHangGUI != null) {
            khachHangGUI.refreshKhachHangTable(); // G·ªçi h√†m l√†m m·ªõi c·ªßa KhachHangGUI
            System.out.println("MainGUI: ƒê√£ y√™u c·∫ßu KhachHangGUI l√†m m·ªõi."); // Log
        } else {
            // Ghi log n·∫øu panel ch∆∞a ƒë∆∞·ª£c t·∫°o (th∆∞·ªùng do vai tr√≤ kh√¥ng ph√π h·ª£p)
            System.err.println("MainGUI: KhachHangGUI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o (vai tr√≤ c√≥ th·ªÉ kh√¥ng ph·∫£i Nh√¢n vi√™n?).");
        }
    }

    /**
     * T·∫°o m·ªôt panel tr·ªëng v·ªõi t√™n ch·ª©c nƒÉng (d√πng l√†m placeholder).
     * @param name T√™n ch·ª©c nƒÉng
     * @return JPanel placeholder
     */
    private JPanel createPlaceholderPanel(String name) {
        JPanel panel = new JPanel(new GridBagLayout()); // D√πng GridBagLayout ƒë·ªÉ cƒÉn gi·ªØa d·ªÖ d√†ng
        panel.setBackground(new Color(244, 247, 252)); // M√†u n·ªÅn nh·∫°t
        JLabel label = new JLabel("Giao di·ªán ch·ª©c nƒÉng: " + name); // Text hi·ªÉn th·ªã
        label.setFont(new Font("Segoe UI", Font.BOLD, 24)); // Font ch·ªØ
        panel.add(label); // Th√™m label v√†o gi·ªØa panel
        return panel;
    }

    /**
     * Hi·ªÉn th·ªã panel con t∆∞∆°ng ·ª©ng v·ªõi t√™n ch·ª©c nƒÉng v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i active c·ªßa n√∫t menu.
     * @param name T√™n c·ªßa card (ph·∫£i kh·ªõp v·ªõi t√™n ƒë√£ d√πng khi add v√†o CardLayout v√† t√™n n√∫t menu)
     */
    private void showCard(String name) {
        // 1. Chuy·ªÉn ƒë·ªïi panel hi·ªÉn th·ªã trong CardLayout
        cardLayout.show(mainContentPanel, name);

        // 2. C·∫≠p nh·∫≠t m√†u s·∫Øc n√∫t menu
        // ƒê·∫∑t l·∫°i m√†u n·ªÅn cho n√∫t ƒëang active tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
        if (currentActiveButton != null) {
            currentActiveButton.setBackground(COLOR_ACCENT_BLUE); // M√†u n·ªÅn m·∫∑c ƒë·ªãnh
        }

        // T√¨m v√† ƒë·∫∑t m√†u n·ªÅn active cho n√∫t m·ªõi ƒë∆∞·ª£c ch·ªçn
        currentActiveButton = menuButtons.get(name);
        if (currentActiveButton != null) {
            currentActiveButton.setBackground(COLOR_BUTTON_ACTIVE); // M√†u n·ªÅn khi active
        }
    }

} // K·∫øt th√∫c class MainGUI