package gui;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.LinkedHashMap; // D√πng LinkedHashMap ƒë·ªÉ duy tr√¨ th·ª© t·ª± c√°c n√∫t
import java.util.Map;

public class MainGUI extends JFrame {

    // --- ƒê·ªãnh nghƒ©a m√†u s·∫Øc t·ª´ m·∫´u ---
    private static final Color COLOR_ACCENT_BLUE = new Color(56, 118, 243); // M√†u xanh nh·∫•n ch√≠nh
    private static final Color COLOR_BUTTON_ACTIVE = new Color(40, 28, 244); // M√†u n·ªÅn n√∫t ƒëang active (ƒë·∫≠m h∆°n 1 ch√∫t)
    private static final Color COLOR_TEXT_WHITE = Color.WHITE; // M√†u ch·ªØ tr·∫Øng
    private static final Color COLOR_SEPARATOR = new Color(255, 255, 255, 255); // M√†u ƒë∆∞·ªùng k·∫ª ph√¢n c√°ch

    private final CardLayout cardLayout = new CardLayout();
    private final JPanel mainContentPanel = new JPanel(cardLayout);

    // L∆∞u tr·ªØ c√°c n√∫t menu ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i active/inactive theo th·ª© t·ª±
    private final Map<String, JPanel> menuButtons = new LinkedHashMap<>();
    private JPanel currentActiveButton = null;

    public MainGUI() {
        setTitle("Ph·∫ßn m·ªÅm qu·∫£n l√Ω c·ª≠a h√†ng ti·ªán l·ª£i");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1300, 800);
        setLocationRelativeTo(null);
        getRootPane().setBorder(BorderFactory.createEmptyBorder());
        setLayout(new BorderLayout(0,0));



        // ===== T·∫†O C√ÅC TH√ÄNH PH·∫¶N GIAO DI·ªÜN =====
        JPanel menuPanel = createMenuPanel();
        setupMainContentPanel();
        JPanel contentWrapperPanel = new JPanel(new BorderLayout());
        contentWrapperPanel.add(createHeaderPanel(), BorderLayout.NORTH); // Header ·ªü tr√™n
        contentWrapperPanel.add(mainContentPanel, BorderLayout.CENTER); // N·ªôi dung ch√≠nh ·ªü gi·ªØa

        add(menuPanel, BorderLayout.WEST);
        add(contentWrapperPanel, BorderLayout.CENTER);

        // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã m√†n h√¨nh ƒë·∫ßu ti√™n ("M√†n h√¨nh ch√≠nh")
        showCard("M√†n h√¨nh ch√≠nh");
    }
    /**
     * T·∫†O HEADER (NAVBAR) - PHI√äN B·∫¢N C√ì TH·ªÇ ƒêI·ªÄU CH·ªàNH CHI·ªÄU R·ªòNG
     */
    private JPanel createHeaderPanel() {
        // --- Panel bao b·ªçc b√™n ngo√†i ---
        JPanel headerContainer = new JPanel(new BorderLayout());
        headerContainer.setBackground(COLOR_TEXT_WHITE);
        headerContainer.setBorder(new EmptyBorder(0, 10, 0, 0)); // Padding
        headerContainer.setPreferredSize(new Dimension(0, 50)); // Set chi·ªÅu cao t·ªïng th·ªÉ

        // --- Panel v·∫Ω thanh m√†u xanh ---
        JPanel blueBarPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(COLOR_ACCENT_BLUE);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
            }
        };
        blueBarPanel.setOpaque(false);

        // --- Panel th√¥ng tin ng∆∞·ªùi d√πng v·ªõi g√≥c bo tr√≤n ---
        JPanel userInfoPanel = new JPanel(new BorderLayout(0, 0)) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(Color.WHITE);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                g2d.setColor(new Color(220, 220, 220));
                g2d.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 20, 20);
            }
        };
        userInfoPanel.setOpaque(false);
        userInfoPanel.setBorder(new EmptyBorder(5, 10, 5, 15));
        // Set k√≠ch th∆∞·ªõc ∆∞a th√≠ch cho panel user ƒë·ªÉ thanh xanh bi·∫øt ch·ª´a ch·ªó
        userInfoPanel.setPreferredSize(new Dimension(210, 0));

        // --- Icon ng∆∞·ªùi d√πng ---
        JLabel userIconLabel;
        try {
            ImageIcon userIcon = new ImageIcon(getClass().getResource("/img/user_icon.png"));
            Image scaledImage = userIcon.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH);
            userIconLabel = new JLabel(new ImageIcon(scaledImage));
        } catch (Exception e) {
            userIconLabel = new JLabel("üë§");
            userIconLabel.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 24));
        }

        // --- Panel ch·ª©a T√™n v√† Vai tr√≤ ---
        JPanel textPanel = new JPanel();
        textPanel.setOpaque(false);
        textPanel.setLayout(new BoxLayout(textPanel, BoxLayout.Y_AXIS));
        JLabel nameLabel = new JLabel("L√¢m ƒê√¨nh Khoa");
        nameLabel.setFont(new Font("Arial", Font.BOLD, 14));
        nameLabel.setForeground(Color.BLACK);
        JLabel roleLabel = new JLabel("Qu·∫£n l√Ω");
        roleLabel.setForeground(Color.BLACK);
        textPanel.add(nameLabel);
        textPanel.add(roleLabel);

        userInfoPanel.add(userIconLabel, BorderLayout.WEST);
        userInfoPanel.add(textPanel, BorderLayout.CENTER);

        // ƒê·∫∑t panel user v√†o b√™n ph·∫£i c·ªßa thanh xanh
        blueBarPanel.add(userInfoPanel, BorderLayout.EAST);

        // ƒê·∫∑t thanh xanh v√†o container
        headerContainer.add(blueBarPanel, BorderLayout.CENTER);

        return headerContainer;
    }

    private JPanel createMenuPanel() {
        JPanel menuPanel = new JPanel();
        menuPanel.setLayout(new BoxLayout(menuPanel, BoxLayout.Y_AXIS));
        // S·ª≠ d·ª•ng m√†u n·ªÅn xanh t·ª´ h√¨nh ·∫£nh sidebar
        menuPanel.setBackground(COLOR_ACCENT_BLUE);
        menuPanel.setPreferredSize(new Dimension(220, getHeight()));
        menuPanel.setBorder(new EmptyBorder(10, 0, 10, 0)); // B·ªè padding ngang ƒë·ªÉ c√°c n√∫t tr√†n ra


        // --- Logo ---
        try {
            ImageIcon originalIcon = new ImageIcon(getClass().getResource("/img/DangNhap+Logo/Logo.jpg"));
            Image originalImage = originalIcon.getImage();
            Image resizedImage = originalImage.getScaledInstance(250, 200, Image.SCALE_DEFAULT);
            ImageIcon resizedIcon = new ImageIcon(resizedImage);
            JLabel logoLabel = new JLabel(resizedIcon);
            logoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            menuPanel.add(logoLabel);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        } catch (Exception e) {
            JLabel titleLabel = new JLabel("StarGuardian"); // Thay th·∫ø b·∫±ng t√™n nh√† h√†ng
            titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 20));
            titleLabel.setForeground(COLOR_TEXT_WHITE);
            titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            menuPanel.add(titleLabel);
            JLabel subtitleLabel = new JLabel("restaurant");
            subtitleLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
            subtitleLabel.setForeground(COLOR_TEXT_WHITE);
            subtitleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            menuPanel.add(subtitleLabel);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 20)));
            System.err.println("L·ªñI: Kh√¥ng t√¨m th·∫•y logo t·∫°i /img/DangNhap+Logo/Logo.jpg");
            e.printStackTrace();
        }

        // --- C√°c n√∫t ch·ª©c nƒÉng ---
        // S·ª≠ d·ª•ng LinkedHashMap ƒë·ªÉ duy tr√¨ th·ª© t·ª± th√™m v√†o
        LinkedHashMap<String, String> menuItems = new LinkedHashMap<>();
        menuItems.put("M√†n h√¨nh ch√≠nh", "‚åÇ"); // Icon Unicode
        menuItems.put("Danh m·ª•c m√≥n ƒÉn", "üçΩÔ∏è");
        menuItems.put("L·ªãch l√†m vi·ªác", "üìÖ");
        menuItems.put("Khuy·∫øn m√£i", "üè∑Ô∏è");
        menuItems.put("H√≥a ƒë∆°n", "üßæ");
        menuItems.put("Nh√¢n vi√™n", "üë§");
        menuItems.put("ƒêƒÉng xu·∫•t", "‚éã");

        for (Map.Entry<String, String> entry : menuItems.entrySet()) {
            JPanel button = createMenuButton(entry.getKey(), entry.getValue());
            menuButtons.put(entry.getKey(), button); // L∆∞u l·∫°i ƒë·ªÉ qu·∫£n l√Ω
            menuPanel.add(button);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 1))); // Kho·∫£ng c√°ch nh·ªè gi·ªØa c√°c n√∫t
        }

        return menuPanel;
    }

    /**
     * Helper ƒë·ªÉ t·∫°o m·ªôt n√∫t menu tr√™n sidebar
     * @param text T√™n n√∫t
     * @param iconChar K√Ω t·ª± Unicode l√†m icon (ho·∫∑c null n·∫øu kh√¥ng c√≥)
     */
    private JPanel createMenuButton(String text, String iconChar) {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 12));
        buttonPanel.setBackground(COLOR_ACCENT_BLUE); // M√†u n·ªÅn m·∫∑c ƒë·ªãnh
        buttonPanel.setMaximumSize(new Dimension(220, 50)); // Chi·ªÅu r·ªông b·∫±ng sidebar
        buttonPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        buttonPanel.setBorder(BorderFactory.createEmptyBorder()); // B·ªè border
        buttonPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, COLOR_SEPARATOR)); // ƒê∆∞·ªùng k·∫ª d∆∞·ªõi d√†y 1px


        // Icon
        if (iconChar != null && !iconChar.isEmpty()) {
            JLabel iconLabel = new JLabel(iconChar);
            iconLabel.setForeground(COLOR_TEXT_WHITE);
            iconLabel.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 18)); // Font cho Unicode icons
            buttonPanel.add(iconLabel);
        }

        // Text
        JLabel label = new JLabel(text);
        label.setForeground(COLOR_TEXT_WHITE);
        label.setFont(new Font("Arial", Font.BOLD, 14)); // Font theo m·∫´u
        buttonPanel.add(label);

        // --- X·ª≠ l√Ω s·ª± ki·ªán Click v√† Hover ---
        buttonPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // X·ª≠ l√Ω s·ª± ki·ªán click
                if (text.equals("ƒêƒÉng xu·∫•t")) {
                    JOptionPane.showMessageDialog(MainGUI.this, "ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
                    // Th·ª±c hi·ªán logic ƒëƒÉng xu·∫•t, v√≠ d·ª•: ƒë√≥ng c·ª≠a s·ªï n√†y v√† m·ªü c·ª≠a s·ªï ƒëƒÉng nh·∫≠p
                } else {
                    showCard(text);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                // Hi·ªáu ·ª©ng khi di chu·ªôt v√†o (n·∫øu kh√¥ng ph·∫£i n√∫t ƒëang active)
                if (buttonPanel != currentActiveButton) {
                    buttonPanel.setBackground(COLOR_BUTTON_ACTIVE.brighter()); // H∆°i s√°ng h∆°n m√†u active
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                // Tr·∫£ v·ªÅ m√†u c≈© khi di chu·ªôt ra (n·∫øu kh√¥ng ph·∫£i n√∫t ƒëang active)
                if (buttonPanel != currentActiveButton) {
                    buttonPanel.setBackground(COLOR_ACCENT_BLUE); // Tr·ªü v·ªÅ m√†u n·ªÅn sidebar
                }
            }
        });

        return buttonPanel;
    }

    private void setupMainContentPanel() {
        mainContentPanel.setBorder(BorderFactory.createEmptyBorder());
        mainContentPanel.add(createPlaceholderPanel("M√†n h√¨nh ch√≠nh"), "M√†n h√¨nh ch√≠nh");
        mainContentPanel.add(createPlaceholderPanel("Danh m·ª•c m√≥n ƒÉn"), "Danh m·ª•c m√≥n ƒÉn");
        mainContentPanel.add(createPlaceholderPanel("L·ªãch l√†m vi·ªác"), "L·ªãch l√†m vi·ªác");
        mainContentPanel.add(createPlaceholderPanel("Khuy·∫øn m√£i"), "Khuy·∫øn m√£i");
        mainContentPanel.add(createPlaceholderPanel("H√≥a ƒë∆°n"), "H√≥a ƒë∆°n");
        mainContentPanel.add(createPlaceholderPanel("Nh√¢n vi√™n"), "Nh√¢n vi√™n");
        mainContentPanel.add(createPlaceholderPanel("ƒêƒÉng xu·∫•t"), "ƒêƒÉng xu·∫•t"); // M·∫∑c d√π s·∫Ω kh√¥ng hi·ªÉn th·ªã, nh∆∞ng v·∫´n c·∫ßn cho CardLayout
    }

    private JPanel createPlaceholderPanel(String name) {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(new Color(244, 247, 252)); // M√†u n·ªÅn ch√≠nh
        JLabel label = new JLabel("ƒê√¢y l√† giao di·ªán " + name);
        label.setFont(new Font("Segoe UI", Font.BOLD, 24));
        panel.add(label);
        return panel;
    }

    private void showCard(String name) {
        // 1. Chuy·ªÉn panel hi·ªÉn th·ªã
        cardLayout.show(mainContentPanel, name);

        // 2. C·∫≠p nh·∫≠t m√†u s·∫Øc cho n√∫t trong menu
        // ƒê·∫∑t l·∫°i m√†u cho n√∫t active c≈© v·ªÅ m√†u n·ªÅn sidebar
        if (currentActiveButton != null) {
            currentActiveButton.setBackground(COLOR_ACCENT_BLUE);
        }

        // C·∫≠p nh·∫≠t n√∫t active m·ªõi v√† ƒë·∫∑t m√†u active
        currentActiveButton = menuButtons.get(name);
        if (currentActiveButton != null) {
            currentActiveButton.setBackground(COLOR_BUTTON_ACTIVE);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                // C·ªë g·∫Øng d√πng Nimbus Look and Feel n·∫øu c√≥
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
                UIManager.put("RootPane.border", BorderFactory.createEmptyBorder());
            } catch (Exception e) {
                // Fallback v·ªÅ m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ƒë∆∞·ª£c
                e.printStackTrace();
            }
            new MainGUI().setVisible(true);
        });
    }
}