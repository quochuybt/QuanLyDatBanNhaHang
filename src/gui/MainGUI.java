package gui;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import dao.KhuyenMaiDAO;
import entity.KhuyenMai;

import java.awt.*;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.LinkedHashMap; // D√πng LinkedHashMap ƒë·ªÉ duy tr√¨ th·ª© t·ª± c√°c n√∫t
import java.util.Map;
import java.util.List;
 
public class MainGUI extends JFrame {
    private static final Color COLOR_ACCENT_BLUE = new Color(56, 118, 243); // M√†u xanh nh·∫•n ch√≠nh
    private static final Color COLOR_BUTTON_ACTIVE = new Color(40, 28, 244); // M√†u n·ªÅn n√∫t ƒëang active (ƒë·∫≠m h∆°n 1 ch√∫t)

    private final CardLayout cardLayout = new CardLayout();
    private final JPanel mainContentPanel = new JPanel(cardLayout);

    // L∆∞u tr·ªØ c√°c n√∫t menu ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i active/inactive theo th·ª© t·ª±
    private final Map<String, JPanel> menuButtons = new LinkedHashMap<>();
    private JPanel currentActiveButton = null;

    public MainGUI() {
        setTitle("Ph·∫ßn m·ªÅm qu·∫£n l√Ω c·ª≠a h√†ng ti·ªán l·ª£i");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1300, 800);
        setLocationRelativeTo(null);
        getRootPane().setBorder(BorderFactory.createEmptyBorder());
        setLayout(new BorderLayout(0,0));

        // ===== T·∫†O C√ÅC TH√ÄNH PH·∫¶N GIAO DI·ªÜN =====
        JPanel menuPanel = createMenuPanel();
        setupMainContentPanel();
        JPanel contentWrapperPanel = new JPanel(new BorderLayout());
        contentWrapperPanel.add(createHeaderPanel(), BorderLayout.NORTH); // Header ·ªü tr√™n
        contentWrapperPanel.add(mainContentPanel, BorderLayout.CENTER); // N·ªôi dung ch√≠nh ·ªü gi·ªØa

        add(menuPanel, BorderLayout.WEST); // Menu b√™n tr√°i
        add(contentWrapperPanel, BorderLayout.CENTER); // N·ªôi dung ch√≠nh b√™n ph·∫£i

        // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã m√†n h√¨nh ƒë·∫ßu ti√™n ("M√†n h√¨nh ch√≠nh")
        showCard("M√†n h√¨nh ch√≠nh");
    }

    private JPanel createHeaderPanel() {
        // --- Panel bao b·ªçc b√™n ngo√†i ---
        JPanel headerContainer = new JPanel(new BorderLayout());
        headerContainer.setBackground(Color.WHITE);
        headerContainer.setBorder(new EmptyBorder(0, 10, 0, 0)); // Padding
        headerContainer.setPreferredSize(new Dimension(0, 50)); // Set chi·ªÅu cao t·ªïng th·ªÉ

        // --- Panel v·∫Ω thanh m√†u xanh ---
        JPanel blueBarPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(COLOR_ACCENT_BLUE);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
            }
        };
        blueBarPanel.setOpaque(false);

        // --- Panel th√¥ng tin ng∆∞·ªùi d√πng v·ªõi g√≥c bo tr√≤n ---
        JPanel userInfoPanel = new JPanel(new BorderLayout(0, 0)) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(Color.WHITE);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 20, 20);
                g2d.setColor(new Color(220, 220, 220));
                g2d.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 20, 20);
            }
        };
        userInfoPanel.setOpaque(false);
        userInfoPanel.setBorder(new EmptyBorder(5, 10, 5, 15));
        // Set k√≠ch th∆∞·ªõc ∆∞a th√≠ch cho panel user ƒë·ªÉ thanh xanh bi·∫øt ch·ª´a ch·ªó
        userInfoPanel.setPreferredSize(new Dimension(210, 0));

        // --- Icon ng∆∞·ªùi d√πng ---
        JLabel userIconLabel;
        try {
            ImageIcon userIcon = new ImageIcon(getClass().getResource("/img/user_icon.png"));
            Image scaledImage = userIcon.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH);
            userIconLabel = new JLabel(new ImageIcon(scaledImage));
        } catch (Exception e) {
            userIconLabel = new JLabel("üë§");
            userIconLabel.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 24));
        }

        // --- Panel ch·ª©a T√™n v√† Vai tr√≤ ---
        JPanel textPanel = new JPanel();
        textPanel.setOpaque(false);
        textPanel.setLayout(new BoxLayout(textPanel, BoxLayout.Y_AXIS));
        JLabel nameLabel = new JLabel("L√¢m ƒê√¨nh Khoa");
        nameLabel.setFont(new Font("Arial", Font.BOLD, 14));
        nameLabel.setForeground(Color.BLACK);
        JLabel roleLabel = new JLabel("Qu·∫£n l√Ω");
        roleLabel.setForeground(Color.BLACK);
        textPanel.add(nameLabel);
        textPanel.add(roleLabel);

        userInfoPanel.add(userIconLabel, BorderLayout.WEST);
        userInfoPanel.add(textPanel, BorderLayout.CENTER);

        // ƒê·∫∑t panel user v√†o b√™n ph·∫£i c·ªßa thanh xanh
        blueBarPanel.add(userInfoPanel, BorderLayout.EAST);

        // ƒê·∫∑t thanh xanh v√†o container
        headerContainer.add(blueBarPanel, BorderLayout.CENTER);

        return headerContainer;
    }

    private JPanel createMenuPanel() {
        JPanel menuPanel = new JPanel();
        menuPanel.setLayout(new BoxLayout(menuPanel, BoxLayout.Y_AXIS));
        // S·ª≠ d·ª•ng m√†u n·ªÅn xanh t·ª´ h√¨nh ·∫£nh sidebar
        menuPanel.setBackground(COLOR_ACCENT_BLUE);
        menuPanel.setPreferredSize(new Dimension(220, 0));
        menuPanel.setBorder(new EmptyBorder(10, 0, 10, 0)); // B·ªè padding ngang ƒë·ªÉ c√°c n√∫t tr√†n ra


        // --- Logo ---
        try {
            ImageIcon originalIcon = new ImageIcon(getClass().getResource("/img/DangNhap+Logo/Logo.jpg"));
            Image originalImage = originalIcon.getImage();
            Image resizedImage = originalImage.getScaledInstance(250, 200, Image.SCALE_DEFAULT);
            ImageIcon resizedIcon = new ImageIcon(resizedImage);
            JLabel logoLabel = new JLabel(resizedIcon);
            logoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            menuPanel.add(logoLabel);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        } catch (Exception e) {
            JLabel titleLabel = new JLabel("StarGuardian"); // Thay th·∫ø b·∫±ng t√™n nh√† h√†ng
            titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 20));
            titleLabel.setForeground(Color.WHITE);
            titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            menuPanel.add(titleLabel);
            JLabel subtitleLabel = new JLabel("restaurant");
            subtitleLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
            subtitleLabel.setForeground(Color.WHITE);
            subtitleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            menuPanel.add(subtitleLabel);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 20)));
            System.err.println("L·ªñI: Kh√¥ng t√¨m th·∫•y logo t·∫°i /img/DangNhap+Logo/Logo.jpg");
            e.printStackTrace();
        }

        // --- C√°c n√∫t ch·ª©c nƒÉng ---
        // S·ª≠ d·ª•ng LinkedHashMap ƒë·ªÉ duy tr√¨ th·ª© t·ª± th√™m v√†o
        LinkedHashMap<String, String> menuItems = new LinkedHashMap<>();
        menuItems.put("M√†n h√¨nh ch√≠nh", "‚åÇ"); // Icon Unicode
        menuItems.put("Danh m·ª•c m√≥n ƒÉn", "üçΩÔ∏è");
        menuItems.put("L·ªãch l√†m vi·ªác", "üìÖ");
        menuItems.put("Khuy·∫øn m√£i", "üè∑Ô∏è");
        menuItems.put("H√≥a ƒë∆°n", "üßæ");
        menuItems.put("Nh√¢n vi√™n", "üë§");
        menuItems.put("ƒêƒÉng xu·∫•t", "‚éã");

        for (Map.Entry<String, String> entry : menuItems.entrySet()) {
            JPanel button = createMenuButton(entry.getKey(), entry.getValue());
            menuButtons.put(entry.getKey(), button); // L∆∞u l·∫°i ƒë·ªÉ qu·∫£n l√Ω
            menuPanel.add(button);
            menuPanel.add(Box.createRigidArea(new Dimension(0, 1))); // Kho·∫£ng c√°ch nh·ªè gi·ªØa c√°c n√∫t
        }

        return menuPanel;
    }

    /**
     * Helper ƒë·ªÉ t·∫°o m·ªôt n√∫t menu tr√™n sidebar
     * @param text T√™n n√∫t
     * @param iconChar K√Ω t·ª± Unicode l√†m icon (ho·∫∑c null n·∫øu kh√¥ng c√≥)
     */
    private JPanel createMenuButton(String text, String iconChar) {
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 15, 12));
        buttonPanel.setBackground(COLOR_ACCENT_BLUE); // M√†u n·ªÅn m·∫∑c ƒë·ªãnh
        buttonPanel.setMaximumSize(new Dimension(220, 50)); // Chi·ªÅu r·ªông b·∫±ng sidebar
        buttonPanel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        buttonPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.WHITE)); // ƒê∆∞·ªùng k·∫ª d∆∞·ªõi d√†y 1px


        // Icon
        if (iconChar != null && !iconChar.isEmpty()) {
            JLabel iconLabel = new JLabel(iconChar);
            iconLabel.setForeground(Color.WHITE);
            iconLabel.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 18)); // Font cho Unicode icons
            buttonPanel.add(iconLabel);
        }

        // Text
        JLabel label = new JLabel(text);
        label.setForeground(Color.WHITE);
        label.setFont(new Font("Arial", Font.BOLD, 14)); // Font theo m·∫´u
        buttonPanel.add(label);

        // --- X·ª≠ l√Ω s·ª± ki·ªán Click v√† Hover ---
        buttonPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // X·ª≠ l√Ω s·ª± ki·ªán click
                if (text.equals("ƒêƒÉng xu·∫•t")) {
                    JOptionPane.showMessageDialog(MainGUI.this, "ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
                    // Th·ª±c hi·ªán logic ƒëƒÉng xu·∫•t, v√≠ d·ª•: ƒë√≥ng c·ª≠a s·ªï n√†y v√† m·ªü c·ª≠a s·ªï ƒëƒÉng nh·∫≠p
                } else {
                    showCard(text);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                // Hi·ªáu ·ª©ng khi di chu·ªôt v√†o (n·∫øu kh√¥ng ph·∫£i n√∫t ƒëang active)
                if (buttonPanel != currentActiveButton) {
                    buttonPanel.setBackground(COLOR_BUTTON_ACTIVE.brighter()); // H∆°i s√°ng h∆°n m√†u active
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                // Tr·∫£ v·ªÅ m√†u c≈© khi di chu·ªôt ra (n·∫øu kh√¥ng ph·∫£i n√∫t ƒëang active)
                if (buttonPanel != currentActiveButton) {
                    buttonPanel.setBackground(COLOR_ACCENT_BLUE); // Tr·ªü v·ªÅ m√†u n·ªÅn sidebar
                }
            }
        });

        return buttonPanel;
    }

    private void setupMainContentPanel() {
        mainContentPanel.setBorder(BorderFactory.createEmptyBorder());
        mainContentPanel.add(createPlaceholderPanel("M√†n h√¨nh ch√≠nh"), "M√†n h√¨nh ch√≠nh");
        mainContentPanel.add(createPlaceholderPanel("Danh m·ª•c m√≥n ƒÉn"), "Danh m·ª•c m√≥n ƒÉn");
        mainContentPanel.add(createPlaceholderPanel("L·ªãch l√†m vi·ªác"), "L·ªãch l√†m vi·ªác");
        mainContentPanel.add(new JPanel_KhuyenMai(), "Khuy·∫øn m√£i");
        mainContentPanel.add(createPlaceholderPanel("H√≥a ƒë∆°n"), "H√≥a ƒë∆°n");
        mainContentPanel.add(createPlaceholderPanel("Nh√¢n vi√™n"), "Nh√¢n vi√™n");
    }

    private JPanel createPlaceholderPanel(String name) {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(new Color(244, 247, 252)); // M√†u n·ªÅn ch√≠nh
        JLabel label = new JLabel("ƒê√¢y l√† giao di·ªán " + name);
        label.setFont(new Font("Segoe UI", Font.BOLD, 24));
        panel.add(label);
        return panel;
    }

    private void showCard(String name) {
        // 1. Chuy·ªÉn panel hi·ªÉn th·ªã
        cardLayout.show(mainContentPanel, name);

        // 2. C·∫≠p nh·∫≠t m√†u s·∫Øc cho n√∫t trong menu
        // ƒê·∫∑t l·∫°i m√†u cho n√∫t active c≈© v·ªÅ m√†u n·ªÅn sidebar
        if (currentActiveButton != null) {
            currentActiveButton.setBackground(COLOR_ACCENT_BLUE);
        }

        // C·∫≠p nh·∫≠t n√∫t active m·ªõi v√† ƒë·∫∑t m√†u active
        currentActiveButton = menuButtons.get(name);
        if (currentActiveButton != null) {
            currentActiveButton.setBackground(COLOR_BUTTON_ACTIVE);
        }
    }

  
public class JPanel_KhuyenMai extends JPanel {

    // --- ƒê·ªãnh nghƒ©a m√†u s·∫Øc ---
    private static final Color COLOR_BACKGROUND = new Color(244, 247, 252);
    private static final Color COLOR_BUTTON_BLUE = new Color(40, 28, 244);
    private static final Color COLOR_TEXT_WHITE = Color.WHITE;
    private static final Color COLOR_TABLE_HEADER_BG = new Color(235, 240, 247);
    private static final Color COLOR_TABLE_GRID = new Color(220, 220, 220);

    // --- Components ---
    private JTable tblKhuyenMai;
    private DefaultTableModel modelKhuyenMai;
    private JButton btnThemKhuyenMai;
    private JComboBox<String> cbxLoc;
    private JTextField txtTimKiem;

    // --- DAO ---
    private final KhuyenMaiDAO khuyenMaiDAO;
    private List<KhuyenMai> dsKhuyenMai; // L∆∞u danh s√°ch KM ƒë·ªÉ truy c·∫≠p khi click
    private final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    public JPanel_KhuyenMai() {
        this.khuyenMaiDAO = new KhuyenMaiDAO(); // Kh·ªüi t·∫°o DAO

        setLayout(new BorderLayout(10, 15));
        setBackground(COLOR_BACKGROUND);
        setBorder(new EmptyBorder(15, 20, 15, 20));

        // === NORTH: Header ===
        add(createHeaderPanel(), BorderLayout.NORTH);

        // === CENTER: B·∫£ng v√† T√¨m ki·∫øm ===
        add(createMainPanel(), BorderLayout.CENTER);

        // === SOUTH: Ph√¢n trang ===
        add(createFooterPanel(), BorderLayout.SOUTH);

        // --- N·∫°p d·ªØ li·ªáu t·ª´ CSDL ---
        loadDataToTable();

        // --- Th√™m s·ª± ki·ªán cho n√∫t "Th√™m" ---
        addEventListeners();
    }

    /**
     * T·∫£i d·ªØ li·ªáu t·ª´ CSDL l√™n JTable
     */
    private void loadDataToTable() {
        modelKhuyenMai.setRowCount(0); // X√≥a h·∫øt d·ªØ li·ªáu c≈©
        dsKhuyenMai = khuyenMaiDAO.getAllKhuyenMai(); // L·∫•y d·ªØ li·ªáu m·ªõi t·ª´ DAO

        for (KhuyenMai km : dsKhuyenMai) {
            String moTa = String.format("<html><b>%s</b><br>%s</html>",
                    km.getTenChuongTrinh(),
                    generateMoTaGiaTri(km)); // T·∫°o m√¥ t·∫£ chi ti·∫øt

            String ngayKT = (km.getNgayKetThuc() != null) ? km.getNgayKetThuc().format(dtf) : "--";

            modelKhuyenMai.addRow(new Object[]{
                    moTa,
                    km.getLoaiKhuyenMai(),
                    km.getNgayBatDau().format(dtf),
                    ngayKT,
                    km.getTrangThai()
            });
        }
    }

    /**
     * Helper t·∫°o m√¥ t·∫£ khuy·∫øn m√£i d·ª±a tr√™n lo·∫°i v√† gi√° tr·ªã
     */
    private String generateMoTaGiaTri(KhuyenMai km) {
        switch (km.getLoaiKhuyenMai()) {
            case "Gi·∫£m theo ph·∫ßn trƒÉm":
                return String.format("Gi·∫£m %.0f%% cho h√≥a ƒë∆°n", km.getGiaTri());
            case "Gi·∫£m gi√° s·ªë ti·ªÅn":
                return String.format("Gi·∫£m %.0f VND cho h√≥a ƒë∆°n", km.getGiaTri());
            case "T·∫∑ng m√≥n":
                return "T·∫∑ng m√≥n theo h√≥a ƒë∆°n"; // C·∫ßn logic chi ti·∫øt h∆°n
            default:
                return "Chi ti·∫øt khuy·∫øn m√£i";
        }
    }


    /**
     * T·∫°o Panel Header (Ti√™u ƒë·ªÅ v√† N√∫t Th√™m)
     */
    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setOpaque(false);

        JLabel lblTitle = new JLabel("Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i");
        lblTitle.setFont(new Font("Arial", Font.BOLD, 24));
        headerPanel.add(lblTitle, BorderLayout.WEST);

        btnThemKhuyenMai = new JButton("+ Th√™m khuy·∫øn m√£i");
        btnThemKhuyenMai.setFont(new Font("Arial", Font.BOLD, 14));
        btnThemKhuyenMai.setBackground(COLOR_BUTTON_BLUE);
        btnThemKhuyenMai.setForeground(COLOR_TEXT_WHITE);
        btnThemKhuyenMai.setFocusPainted(false);
        btnThemKhuyenMai.setBorder(new EmptyBorder(10, 15, 10, 15));
        btnThemKhuyenMai.setCursor(new Cursor(Cursor.HAND_CURSOR));
        headerPanel.add(btnThemKhuyenMai, BorderLayout.EAST);

        return headerPanel;
    }

    /**
     * T·∫°o Panel Ch√≠nh (T√¨m ki·∫øm v√† B·∫£ng)
     */
    private JPanel createMainPanel() {
        JPanel mainPanel = new JPanel(new BorderLayout(0, 10));
        mainPanel.setOpaque(false);
        mainPanel.add(createSearchPanel(), BorderLayout.NORTH);
        mainPanel.add(createTablePanel(), BorderLayout.CENTER);
        return mainPanel;
    }

    /**
     * T·∫°o Panel T√¨m ki·∫øm v√† L·ªçc
     */
    private JPanel createSearchPanel() {
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        searchPanel.setOpaque(false);

        String[] locOptions = {"L·ªçc khuy·∫øn m√£i", "ƒêang √°p d·ª•ng", "Ng∆∞ng √°p d·ª•ng"};
        cbxLoc = new JComboBox<>(locOptions);
        cbxLoc.setFont(new Font("Arial", Font.PLAIN, 14));
        cbxLoc.setPreferredSize(new Dimension(160, 38));
        searchPanel.add(cbxLoc);

        JPanel searchBox = new JPanel(new BorderLayout(5, 0));
        searchBox.setBackground(Color.WHITE);
        searchBox.setBorder(BorderFactory.createLineBorder(COLOR_TABLE_GRID));

        JLabel searchIcon = new JLabel(" üîç ");
        searchIcon.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 16));
        searchBox.add(searchIcon, BorderLayout.WEST);

        txtTimKiem = new JTextField();
        txtTimKiem.setFont(new Font("Arial", Font.PLAIN, 14));
        txtTimKiem.setBorder(null);
        txtTimKiem.setPreferredSize(new Dimension(300, 36));
        addPlaceholder(txtTimKiem, "T√¨m ki·∫øm khuy·∫øn m√£i");
        searchBox.add(txtTimKiem, BorderLayout.CENTER);

        searchPanel.add(searchBox);
        return searchPanel;
    }

    /**
     * T·∫°o Panel B·∫£ng (JTable)
     */
    private JScrollPane createTablePanel() {
        String[] columnNames = {"Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i", "Lo·∫°i khuy·∫øn m√£i", "Ng√†y b·∫Øt ƒë·∫ßu", "Ng√†y k·∫øt th√∫c", "Tr·∫°ng th√°i"};

        modelKhuyenMai = new DefaultTableModel(columnNames, 0) { // Kh·ªüi t·∫°o v·ªõi 0 h√†ng
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        tblKhuyenMai = new JTable(modelKhuyenMai);

        // --- T√πy ch·ªânh giao di·ªán cho B·∫£ng ---
        tblKhuyenMai.setRowHeight(60);
        tblKhuyenMai.setFont(new Font("Arial", Font.PLAIN, 14));
        tblKhuyenMai.setGridColor(COLOR_TABLE_GRID);
        tblKhuyenMai.setShowGrid(true);
        tblKhuyenMai.setIntercellSpacing(new Dimension(0, 0));

        tblKhuyenMai.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));
        tblKhuyenMai.getTableHeader().setOpaque(false);
        tblKhuyenMai.getTableHeader().setBackground(COLOR_TABLE_HEADER_BG);
        tblKhuyenMai.getTableHeader().setPreferredSize(new Dimension(0, 40));
        tblKhuyenMai.getTableHeader().setReorderingAllowed(false);

        // --- ƒê·∫∂T RENDERER T√ôY CH·ªàNH CHO C·ªòT "TR·∫†NG TH√ÅI" ---
        tblKhuyenMai.getColumnModel().getColumn(4).setCellRenderer(new TrangThaiRenderer());

        tblKhuyenMai.getColumnModel().getColumn(0).setPreferredWidth(250);
        tblKhuyenMai.getColumnModel().getColumn(1).setPreferredWidth(150);
        tblKhuyenMai.getColumnModel().getColumn(4).setPreferredWidth(120);

        // --- TH√äM S·ª∞ KI·ªÜN CLICK (ƒê·ªÇ S·ª¨A) ---
        addTableClickListener();

        JScrollPane scrollPane = new JScrollPane(tblKhuyenMai);
        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setBorder(BorderFactory.createLineBorder(COLOR_TABLE_GRID));

        return scrollPane;
    }

    /**
     * T·∫°o Panel Ch√¢n trang (Ph√¢n trang)
     */
    private JPanel createFooterPanel() {
        JPanel footerPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        footerPanel.setOpaque(false);

        JButton btnPrev = new JButton("<");
        JButton btnNext = new JButton(">");
        JButton btnPage1 = new JButton("1");
        btnPage1.setBackground(COLOR_BUTTON_BLUE);
        btnPage1.setForeground(COLOR_TEXT_WHITE);

        stylePaginationButton(btnPrev);
        stylePaginationButton(btnNext);
        stylePaginationButton(btnPage1);

        footerPanel.add(btnPrev);
        footerPanel.add(btnPage1);
        footerPanel.add(btnNext);

        return footerPanel;
    }

    // Helper ƒë·ªÉ style n√∫t ph√¢n trang
    private void stylePaginationButton(JButton btn) {
        btn.setFocusPainted(false);
        btn.setPreferredSize(new Dimension(35, 35));
        btn.setFont(new Font("Arial", Font.BOLD, 12));
        if (!btn.getText().equals("1")) {
            btn.setBackground(Color.WHITE);
            btn.setForeground(Color.BLACK);
        }
    }

    // --- H√†m H·ªó Tr·ª£ Placeholder ---
    private void addPlaceholder(JTextField tf, String placeholder) {
        tf.setText(placeholder);
        tf.setForeground(Color.GRAY);
        tf.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (tf.getText().equals(placeholder)) {
                    tf.setText("");
                    tf.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (tf.getText().isEmpty()) {
                    tf.setText(placeholder);
                    tf.setForeground(Color.GRAY);
                }
            }
        });
    }

    /**
     * G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
     */
    private void addEventListeners() {
        // S·ª± ki·ªán n√∫t "Th√™m khuy·∫øn m√£i"
        btnThemKhuyenMai.addActionListener(e -> {
            // M·ªü dialog ·ªü ch·∫ø ƒë·ªô "Th√™m" (truy·ªÅn null)
            showKhuyenMaiDialog(null);
        });
    }

    /**
     * Th√™m s·ª± ki·ªán click v√†o JTable (ƒë·ªÉ S·ª≠a)
     */
    private void addTableClickListener() {
        tblKhuyenMai.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Ki·ªÉm tra n·∫øu click 2 l·∫ßn
                if (e.getClickCount() == 2) {
                    int row = tblKhuyenMai.getSelectedRow();
                    if (row == -1) return;

                    // L·∫•y ƒë·ªëi t∆∞·ª£ng KhuyenMai t∆∞∆°ng ·ª©ng t·ª´ danh s√°ch
                    KhuyenMai kmCanSua = dsKhuyenMai.get(row);

                    // M·ªü dialog ·ªü ch·∫ø ƒë·ªô "S·ª≠a" (truy·ªÅn ƒë·ªëi t∆∞·ª£ng km)
                    showKhuyenMaiDialog(kmCanSua);
                }
            }
        });
    }

    /**
     * Hi·ªÉn th·ªã pop-up (JDialog) ƒë·ªÉ Th√™m ho·∫∑c S·ª≠a khuy·∫øn m√£i
     *
     * @param km ƒê·ªëi t∆∞·ª£ng KhuyenMai ƒë·ªÉ s·ª≠a (n·∫øu null, l√† ch·∫ø ƒë·ªô Th√™m m·ªõi)
     */
    private void showKhuyenMaiDialog(KhuyenMai km) {
        // T·∫°o JDialog (pop-up)
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Qu·∫£n l√Ω Khuy·∫øn m√£i", true);
        dialog.setSize(450, 400);
        dialog.setLocationRelativeTo(this);
        dialog.setLayout(new BorderLayout(10, 10));

        // --- Form nh·∫≠p li·ªáu ---
        JPanel formPanel = new JPanel(new GridLayout(0, 2, 10, 10)); // 0 h√†ng, 2 c·ªôt
        formPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

        // C√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        JTextField txtMaKM = new JTextField(km != null ? km.getMaKM() : "");
        if (km != null) txtMaKM.setEditable(false); // Kh√¥ng cho s·ª≠a M√£
        
        JTextField txtTenCT = new JTextField(km != null ? km.getTenChuongTrinh() : "");
        
        String[] loaiKMOptions = {"Gi·∫£m theo ph·∫ßn trƒÉm", "Gi·∫£m gi√° s·ªë ti·ªÅn", "T·∫∑ng m√≥n"};
        JComboBox<String> cbLoaiKM = new JComboBox<>(loaiKMOptions);
        if (km != null) cbLoaiKM.setSelectedItem(km.getLoaiKhuyenMai());

        JTextField txtGiaTri = new JTextField(km != null ? String.valueOf(km.getGiaTri()) : "0");
        
        // (N√¢ng cao: n√™n d√πng JDatePicker, ·ªü ƒë√¢y d√πng t·∫°m JTextField)
        JTextField txtNgayBD = new JTextField(km != null ? km.getNgayBatDau().format(dtf) : "dd/MM/yyyy");
        JTextField txtNgayKT = new JTextField((km != null && km.getNgayKetThuc() != null) ? km.getNgayKetThuc().format(dtf) : "dd/MM/yyyy");

        String[] trangThaiOptions = {"ƒêang √°p d·ª•ng", "Ng∆∞ng √°p d·ª•ng"};
        JComboBox<String> cbTrangThai = new JComboBox<>(trangThaiOptions);
        if (km != null) cbTrangThai.setSelectedItem(km.getTrangThai());

        // Th√™m c√°c component v√†o form
        formPanel.add(new JLabel("M√£ Khuy·∫øn m√£i:"));
        formPanel.add(txtMaKM);
        formPanel.add(new JLabel("T√™n Ch∆∞∆°ng tr√¨nh:"));
        formPanel.add(txtTenCT);
        formPanel.add(new JLabel("Lo·∫°i Khuy·∫øn m√£i:"));
        formPanel.add(cbLoaiKM);
        formPanel.add(new JLabel("Gi√° tr·ªã:"));
        formPanel.add(txtGiaTri);
        formPanel.add(new JLabel("Ng√†y B·∫Øt ƒë·∫ßu (dd/MM/yyyy):"));
        formPanel.add(txtNgayBD);
        formPanel.add(new JLabel("Ng√†y K·∫øt th√∫c (dd/MM/yyyy):"));
        formPanel.add(txtNgayKT);
        formPanel.add(new JLabel("Tr·∫°ng th√°i:"));
        formPanel.add(cbTrangThai);

        dialog.add(formPanel, BorderLayout.CENTER);

        // --- N√∫t L∆∞u ---
        JButton btnLuu = new JButton("L∆∞u l·∫°i");
        btnLuu.setBackground(COLOR_BUTTON_BLUE);
        btnLuu.setForeground(COLOR_TEXT_WHITE);
        btnLuu.addActionListener(e -> {
            try {
                // 1. L·∫•y d·ªØ li·ªáu t·ª´ form
                String ma = txtMaKM.getText().trim();
                String ten = txtTenCT.getText().trim();
                String loai = (String) cbLoaiKM.getSelectedItem();
                double giaTri = Double.parseDouble(txtGiaTri.getText().trim());
                LocalDate ngayBD = LocalDate.parse(txtNgayBD.getText().trim(), dtf);
                
                LocalDate ngayKT = null;
                if (!txtNgayKT.getText().trim().isEmpty() && !txtNgayKT.getText().trim().equals("dd/MM/yyyy")) {
                    ngayKT = LocalDate.parse(txtNgayKT.getText().trim(), dtf);
                }
                
                String trangThai = (String) cbTrangThai.getSelectedItem();

                // 2. T·∫°o ƒë·ªëi t∆∞·ª£ng KhuyenMai
                KhuyenMai kmMoi = new KhuyenMai(ma, ten, loai, giaTri, ngayBD, ngayKT, trangThai);

                // 3. G·ªçi DAO
                boolean success;
                if (km == null) {
                    // Ch·∫ø ƒë·ªô TH√äM M·ªöI
                    // success = khuyenMaiDAO.themKhuyenMai(kmMoi); // B·∫°n c·∫ßn t·ª± vi·∫øt h√†m n√†y
                    success = true; // Gi·∫£ s·ª≠
                    JOptionPane.showMessageDialog(dialog, "ƒê√£ th√™m khuy·∫øn m√£i th√†nh c√¥ng!");
                } else {
                    // Ch·∫ø ƒë·ªô S·ª¨A
                    success = khuyenMaiDAO.updateKhuyenMai(kmMoi);
                    JOptionPane.showMessageDialog(dialog, "ƒê√£ c·∫≠p nh·∫≠t khuy·∫øn m√£i th√†nh c√¥ng!");
                }

                if (success) {
                    dialog.dispose(); // ƒê√≥ng pop-up
                    loadDataToTable(); // T·∫£i l·∫°i b·∫£ng
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(dialog, "L·ªói: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        });

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(btnLuu);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        // Hi·ªÉn th·ªã dialog
        dialog.setVisible(true);
    }


    // --- L·ªöP CON (INNER CLASS) ƒê·ªÇ V·∫º C·ªòT TR·∫†NG TH√ÅI ---
    private class TrangThaiRenderer extends DefaultTableCellRenderer {
        private final Color COLOR_GREEN_BG = new Color(220, 250, 230);
        private final Color COLOR_GREEN_FG = new Color(0, 150, 50);
        private final Color COLOR_RED_BG = new Color(255, 230, 230);
        private final Color COLOR_RED_FG = new Color(210, 0, 0);

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                     boolean isSelected, boolean hasFocus,
                                                     int row, int column) {

            JPanel panel = new JPanel(new GridBagLayout());
            JLabel label = new JLabel(value.toString());

            label.setOpaque(true);
            label.setFont(new Font("Arial", Font.BOLD, 12));
            label.setBorder(new EmptyBorder(5, 15, 5, 15));

            if ("ƒêang √°p d·ª•ng".equals(value.toString())) {
                label.setBackground(COLOR_GREEN_BG);
                label.setForeground(COLOR_GREEN_FG);
            } else {
                label.setBackground(COLOR_RED_BG);
                label.setForeground(COLOR_RED_FG);
            }

            if (isSelected) {
                panel.setBackground(table.getSelectionBackground());
            } else {
                panel.setBackground(Color.WHITE);
            }

            panel.add(label);
            return panel;
        }
    }
}
}

//    public static void main(String[] args) {
//        SwingUtilities.invokeLater(() -> {
//            try {
//                // C·ªë g·∫Øng d√πng Nimbus Look and Feel n·∫øu c√≥
//                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
//                    if ("Nimbus".equals(info.getName())) {
//                        UIManager.setLookAndFeel(info.getClassName());
//                        break;
//                    }
//                }
//                UIManager.put("RootPane.border", BorderFactory.createEmptyBorder());
//            } catch (Exception e) {
//                // Fallback v·ªÅ m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ƒë∆∞·ª£c
//                e.printStackTrace();
//            }
//            new MainGUI().setVisible(true);
//        });
//    }
