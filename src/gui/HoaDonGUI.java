package gui;

import dao.ChiTietHoaDonDAO;
import dao.HoaDonDAO;
import dao.MonAnDAO;
import dao.NhanVienDAO; // <-- IMPORT M·ªöI
import entity.ChiTietHoaDon;
import entity.HoaDon;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import util.ExcelExporter; // ƒê·∫£m b·∫£o import ƒë√∫ng package c·ªßa ExcelExporter

public class HoaDonGUI extends JPanel {
    private final HoaDonDAO hoaDonDAO;
    private final ChiTietHoaDonDAO chiTietHoaDonDAO;
    private final MonAnDAO monAnDAO;
    private final NhanVienDAO nhanVienDAO; // <-- KHAI B√ÅO M·ªöI

    private final JTable tableHoaDon;
    private final DefaultTableModel tableModel;
    private final JTabbedPane tabbedPane;
    private JTextField txtTimKiem;
    private List<HoaDon> dsHoaDonDisplayed; // Danh s√°ch h√≥a ƒë∆°n ƒëang hi·ªÉn th·ªã tr√™n b·∫£ng
    private DocumentListener searchListener;
    private Timer searchTimer; // Timer ƒë·ªÉ tr√¨ ho√£n t√¨m ki·∫øm khi g√µ

    // --- Constants ---
    private static final Color COLOR_BG_LIGHT = new Color(244, 247, 252);
    private final String[] columnNames = {"Th·ªùi gian thanh to√°n", "M√£ tham chi·∫øu", "Nh√¢n vi√™n", "Ghi ch√∫", "Thanh to√°n", "T·ªïng ti·ªÅn"};
    private final DecimalFormat currencyFormatter = new DecimalFormat("#,##0 ‚Ç´"); // Format ti·ªÅn t·ªá VNƒê
    private final DateTimeFormatter tableDateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"); // Format ng√†y gi·ªù cho b·∫£ng

    public HoaDonGUI() {
        // --- Kh·ªüi t·∫°o DAO ---
        this.hoaDonDAO = new HoaDonDAO();
        this.chiTietHoaDonDAO = new ChiTietHoaDonDAO();
        this.monAnDAO = new MonAnDAO();
        this.nhanVienDAO = new NhanVienDAO(); // Kh·ªüi t·∫°o NhanVienDAO
        this.dsHoaDonDisplayed = new ArrayList<>(); // Kh·ªüi t·∫°o danh s√°ch tr·ªëng

        // --- C√†i ƒë·∫∑t Layout v√† Giao di·ªán c∆° b·∫£n ---
        setLayout(new BorderLayout(10, 10)); // Kho·∫£ng c√°ch ngang d·ªçc 10px
        setBackground(COLOR_BG_LIGHT);       // M√†u n·ªÅn nh·∫°t
        setBorder(new EmptyBorder(15, 15, 15, 15)); // Padding xung quanh

        // --- Header (Ti√™u ƒë·ªÅ v√† n√∫t Xu·∫•t Excel) ---
        add(createHeaderPanel(), BorderLayout.NORTH);

        // --- B·∫£ng H√≥a ƒê∆°n (T·∫°o m·ªôt l·∫ßn) ---
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Kh√¥ng cho ph√©p s·ª≠a tr·ª±c ti·∫øp tr√™n b·∫£ng
            }
        };
        tableHoaDon = new JTable(tableModel);
        setupTableAppearance(tableHoaDon); // C·∫•u h√¨nh giao di·ªán b·∫£ng
        JScrollPane scrollPane = new JScrollPane(tableHoaDon); // B·ªçc b·∫£ng trong thanh cu·ªôn
        JPanel mainTablePanel = createMainTablePanel(scrollPane); // Panel ch·ª©a √¥ t√¨m ki·∫øm v√† b·∫£ng

        // --- Tab L·ªçc ---
        tabbedPane = createFilterTabs(); // T·∫°o c√°c tab l·ªçc
        tabbedPane.addChangeListener(e -> loadDataForSelectedTab()); // G·∫Øn s·ª± ki·ªán khi chuy·ªÉn tab

        // --- B·ªë c·ª•c ch√≠nh ---
        JPanel centerPanel = new JPanel(new BorderLayout()); // Panel trung t√¢m ch·ª©a tab v√† b·∫£ng
        centerPanel.setOpaque(false); // N·ªÅn trong su·ªët
        centerPanel.add(tabbedPane, BorderLayout.NORTH);     // Tab ·ªü tr√™n
        centerPanel.add(mainTablePanel, BorderLayout.CENTER); // B·∫£ng ·ªü gi·ªØa

        add(centerPanel, BorderLayout.CENTER); // Th√™m panel trung t√¢m v√†o layout ch√≠nh

        // --- G·∫Øn Listener cho b·∫£ng ---
        addTableClickListener(); // X·ª≠ l√Ω double-click ƒë·ªÉ xem chi ti·∫øt

        // --- T·∫£i d·ªØ li·ªáu l·∫ßn ƒë·∫ßu ---
        // S·ª≠ d·ª•ng invokeLater ƒë·ªÉ ƒë·∫£m b·∫£o giao di·ªán ƒë∆∞·ª£c v·∫Ω xong tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu n·∫∑ng
        SwingUtilities.invokeLater(() -> loadDataToTable(hoaDonDAO.getAllHoaDon()));
    }

    /**
     * T·∫°o panel header ch·ª©a ti√™u ƒë·ªÅ "H√≥a ƒë∆°n" v√† n√∫t "Xu·∫•t h√≥a ƒë∆°n".
     */
    private JPanel createHeaderPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setOpaque(false); // N·ªÅn trong su·ªët
        panel.setBorder(new EmptyBorder(0, 0, 10, 0)); // L·ªÅ d∆∞·ªõi 10px

        JLabel titleLabel = new JLabel("H√≥a ƒë∆°n");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        panel.add(titleLabel, BorderLayout.WEST); // Ti√™u ƒë·ªÅ b√™n tr√°i

        // --- N√∫t Xu·∫•t Excel ---
        JButton btnExport = new JButton("Xu·∫•t h√≥a ƒë∆°n");
        styleExportButton(btnExport); // √Åp d·ª•ng style cho n√∫t
        btnExport.addActionListener(e -> exportDataToExcel()); // G·∫Øn s·ª± ki·ªán xu·∫•t Excel
        panel.add(btnExport, BorderLayout.EAST); // N√∫t b√™n ph·∫£i

        return panel;
    }

    /**
     * √Åp d·ª•ng style cho n√∫t Xu·∫•t Excel (icon, m√†u s·∫Øc, font ch·ªØ).
     */
    private void styleExportButton(JButton btnExport) {
        ImageIcon originalIcon = null;
        try {
            // C·ªë g·∫Øng t·∫£i icon t·ª´ resources
            java.net.URL iconURL = getClass().getResource("/img/icon_excel/excel.png");
            if (iconURL != null) {
                originalIcon = new ImageIcon(iconURL);
            } else {
                System.err.println("Kh√¥ng t√¨m th·∫•y icon excel.png");
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫£i icon excel: " + e.getMessage());
            originalIcon = null;
        }

        if (originalIcon != null) {
            // Thay ƒë·ªïi k√≠ch th∆∞·ªõc icon n·∫øu t·∫£i th√†nh c√¥ng
            Image scaledImage = originalIcon.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH);
            btnExport.setIcon(new ImageIcon(scaledImage));
            btnExport.setHorizontalTextPosition(SwingConstants.RIGHT); // Ch·ªØ b√™n ph·∫£i icon
            btnExport.setIconTextGap(8); // Kho·∫£ng c√°ch gi·ªØa icon v√† ch·ªØ
        } else {
            btnExport.setText("Xu·∫•t Excel (icon l·ªói)"); // Th√¥ng b√°o n·∫øu icon l·ªói
        }

        btnExport.setBackground(new Color(0, 150, 60)); // M√†u n·ªÅn xanh l√°
        btnExport.setForeground(Color.WHITE);          // Ch·ªØ m√†u tr·∫Øng
        btnExport.setFont(new Font("Arial", Font.BOLD, 14));
        btnExport.setFocusPainted(false);             // B·ªè vi·ªÅn focus
        btnExport.setCursor(new Cursor(Cursor.HAND_CURSOR)); // ƒê·ªïi con tr·ªè khi r√™ chu·ªôt
        // Vi·ªÅn k·∫øt h·ª£p padding
        btnExport.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(0, 180, 80), 1), // Vi·ªÅn xanh l√° ƒë·∫≠m h∆°n
                new EmptyBorder(8, 15, 8, 15) // Padding
        ));
        btnExport.setContentAreaFilled(true); // ƒê·∫£m b·∫£o n·ªÅn ƒë∆∞·ª£c v·∫Ω
    }


    /**
     * T·∫°o JTabbedPane ch·ª©a c√°c tab l·ªçc h√≥a ƒë∆°n.
     */
    private JTabbedPane createFilterTabs() {
        JTabbedPane tabPane = new JTabbedPane();
        tabPane.setFont(new Font("Arial", Font.BOLD, 14));
        tabPane.setBackground(Color.WHITE); // N·ªÅn tr·∫Øng cho c√°c tab
        // Th√™m c√°c tab
        tabPane.addTab("T·∫•t c·∫£ h√≥a ƒë∆°n", null);
        tabPane.addTab("ƒê√£ thanh to√°n", null);
        tabPane.addTab("Ch∆∞a thanh to√°n", null); // ƒê·ªïi t√™n tab cho r√µ r√†ng
        return tabPane;
    }

    /**
     * T·∫°o panel ch√≠nh ch·ª©a √¥ t√¨m ki·∫øm v√† b·∫£ng h√≥a ƒë∆°n.
     * @param scrollPane JScrollPane ch·ª©a b·∫£ng h√≥a ƒë∆°n.
     */
    private JPanel createMainTablePanel(JScrollPane scrollPane) {
        JPanel panel = new JPanel(new BorderLayout(0, 10)); // Kho·∫£ng c√°ch d·ªçc 10px
        panel.setOpaque(false); // N·ªÅn trong su·ªët

        // --- Panel T√¨m ki·∫øm ---
        JPanel searchPanel = new JPanel(new BorderLayout(10, 0)); // Kho·∫£ng c√°ch ngang 10px
        searchPanel.setBorder(new EmptyBorder(10, 0, 10, 0)); // L·ªÅ tr√™n d∆∞·ªõi 10px
        searchPanel.setOpaque(false); // N·ªÅn trong su·ªët

        // √î nh·∫≠p li·ªáu t√¨m ki·∫øm
        txtTimKiem = new JTextField(" T√¨m ki·∫øm qua m√£ h√≥a ƒë∆°n"); // Placeholder ban ƒë·∫ßu
        txtTimKiem.setFont(new Font("Arial", Font.PLAIN, 14));
        txtTimKiem.setForeground(Color.GRAY); // M√†u ch·ªØ placeholder
        txtTimKiem.setPreferredSize(new Dimension(0, 35)); // Chi·ªÅu cao 35px
        // Vi·ªÅn k·∫øt h·ª£p padding
        txtTimKiem.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1), // Vi·ªÅn x√°m nh·∫°t
                BorderFactory.createEmptyBorder(5, 5, 5, 5) // Padding
        ));

        // X·ª≠ l√Ω Placeholder khi focus/m·∫•t focus
        addPlaceholderFocusHandler(txtTimKiem, " T√¨m ki·∫øm qua m√£ h√≥a ƒë∆°n");

        // T√¨m ki·∫øm real-time (khi g√µ) v·ªõi ƒë·ªô tr·ªÖ (timer)
        setupRealTimeSearch();

        // Icon t√¨m ki·∫øm
        JLabel searchIcon = new JLabel("üîé"); // K√Ω t·ª± k√≠nh l√∫p
        searchIcon.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 16));
        JPanel inputWrapper = new JPanel(new BorderLayout(5, 0)); // B·ªçc icon v√† √¥ nh·∫≠p
        inputWrapper.setOpaque(false);
        inputWrapper.add(searchIcon, BorderLayout.WEST);
        inputWrapper.add(txtTimKiem, BorderLayout.CENTER);
        searchPanel.add(inputWrapper, BorderLayout.CENTER); // Th√™m v√†o panel t√¨m ki·∫øm

        panel.add(searchPanel, BorderLayout.NORTH); // Panel t√¨m ki·∫øm ·ªü tr√™n

        // --- B·∫£ng H√≥a ƒê∆°n ---
        scrollPane.getViewport().setBackground(Color.WHITE); // N·ªÅn tr·∫Øng cho v√πng ch·ª©a b·∫£ng
        scrollPane.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1)); // Vi·ªÅn x√°m nh·∫°t
        panel.add(scrollPane, BorderLayout.CENTER); // B·∫£ng ·ªü gi·ªØa

        return panel;
    }

    /**
     * X·ª≠ l√Ω hi·ªÉn th·ªã placeholder cho JTextField.
     */
    private void addPlaceholderFocusHandler(JTextField textField, String placeholder) {
        textField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                // Khi focus v√†o, n·∫øu ƒëang l√† placeholder th√¨ x√≥a text v√† ƒë·ªïi m√†u ch·ªØ
                if (textField.getText().trim().equals(placeholder)) {
                    textField.setText("");
                    textField.setForeground(Color.BLACK);
                }
            }
            @Override
            public void focusLost(FocusEvent e) {
                // Khi m·∫•t focus, n·∫øu √¥ tr·ªëng th√¨ ƒë·∫∑t l·∫°i placeholder v√† m√†u ch·ªØ x√°m
                if (textField.getText().trim().isEmpty()) {
                    textField.setForeground(Color.GRAY);
                    textField.setText(placeholder);
                }
            }
        });
    }

    /**
     * C√†i ƒë·∫∑t t√¨m ki·∫øm real-time s·ª≠ d·ª•ng Timer v√† DocumentListener.
     */
    private void setupRealTimeSearch() {
        // Timer ƒë·ªÉ tr√¨ ho√£n vi·ªác t√¨m ki·∫øm 300ms sau khi ng∆∞·ªùi d√πng ng·ª´ng g√µ
        searchTimer = new Timer(300, e -> performSearch());
        searchTimer.setRepeats(false); // Ch·ªâ ch·∫°y 1 l·∫ßn sau khi ng·ª´ng g√µ

        // Listener theo d√µi thay ƒë·ªïi trong √¥ t√¨m ki·∫øm
        searchListener = new DocumentListener() {
            @Override public void insertUpdate(DocumentEvent e) { searchTimer.restart(); } // Kh·ªüi ƒë·ªông l·∫°i timer khi th√™m k√Ω t·ª±
            @Override public void removeUpdate(DocumentEvent e) { searchTimer.restart(); } // Kh·ªüi ƒë·ªông l·∫°i timer khi x√≥a k√Ω t·ª±
            @Override public void changedUpdate(DocumentEvent e) { /* Kh√¥ng d√πng cho plain text */ }
        };
        txtTimKiem.getDocument().addDocumentListener(searchListener); // G·∫Øn listener v√†o √¥ t√¨m ki·∫øm
    }


    /**
     * C·∫•u h√¨nh giao di·ªán cho b·∫£ng (font, m√†u s·∫Øc, chi·ªÅu cao d√≤ng, ƒë·ªô r·ªông c·ªôt).
     */
    private void setupTableAppearance(JTable table) {
        // Header
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));
        table.getTableHeader().setBackground(new Color(230, 230, 230)); // M√†u n·ªÅn header x√°m nh·∫°t
        table.getTableHeader().setReorderingAllowed(false); // Kh√¥ng cho k√©o th·∫£ c·ªôt
        // D√≤ng d·ªØ li·ªáu
        table.setRowHeight(30); // Chi·ªÅu cao d√≤ng
        table.setFont(new Font("Arial", Font.PLAIN, 13));
        table.setShowGrid(true); // Hi·ªÉn th·ªã ƒë∆∞·ªùng k·∫ª l∆∞·ªõi
        table.setGridColor(new Color(230, 230, 230)); // M√†u ƒë∆∞·ªùng k·∫ª l∆∞·ªõi
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Ch·ªâ cho ch·ªçn 1 d√≤ng

        // Thi·∫øt l·∫≠p ƒë·ªô r·ªông ∆∞u ti√™n cho c√°c c·ªôt
        TableColumnModel tcm = table.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(150); // Th·ªùi gian
        tcm.getColumn(1).setPreferredWidth(100); // M√£ tham chi·∫øu
        tcm.getColumn(2).setPreferredWidth(100); // Nh√¢n vi√™n
        tcm.getColumn(3).setPreferredWidth(200); // Ghi ch√∫
        tcm.getColumn(4).setPreferredWidth(100); // Thanh to√°n
        tcm.getColumn(5).setPreferredWidth(100); // T·ªïng ti·ªÅn
    }

    /**
     * T·∫£i d·ªØ li·ªáu t·ª´ danh s√°ch HoaDon v√†o JTable.
     * @param list Danh s√°ch h√≥a ƒë∆°n c·∫ßn hi·ªÉn th·ªã.
     */
    private void loadDataToTable(List<HoaDon> list) {
        // Ch·∫°y tr√™n lu·ªìng EDT ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n cho Swing
        SwingUtilities.invokeLater(() -> {
            // C·∫≠p nh·∫≠t danh s√°ch ƒëang hi·ªÉn th·ªã
            if (list == null) {
                dsHoaDonDisplayed = new ArrayList<>(); // T·∫°o list r·ªóng n·∫øu null
            } else {
                dsHoaDonDisplayed = list;
            }

            tableModel.setRowCount(0); // X√≥a h·∫øt d·ªØ li·ªáu c≈© tr√™n b·∫£ng

            // L·∫∑p qua danh s√°ch h√≥a ƒë∆°n v√† th√™m v√†o b·∫£ng
            for (HoaDon hd : dsHoaDonDisplayed) {
                if (hd == null) continue; // B·ªè qua n·∫øu h√≥a ƒë∆°n b·ªã null

                String maThamChieu = hd.getMaHD() != null ? hd.getMaHD() : "N/A";

                // L·∫•y t√™n nh√¢n vi√™n t·ª´ m√£ NV
                String maNV = hd.getMaNV();
                String tenNV_Thuc = nhanVienDAO.getTenNhanVienByMa(maNV); // D√πng DAO ƒë·ªÉ l·∫•y t√™n

                // X√°c ƒë·ªãnh ghi ch√∫ d·ª±a tr√™n logic nghi·ªáp v·ª•
                String ghiChu = "Kh√¥ng";
                if (hd.getTongTien() > 1000000) {
                    ghiChu = "Y√™u c·∫ßu xu·∫•t VAT";
                } else if (hd.getHinhThucThanhToan() != null && hd.getHinhThucThanhToan().equalsIgnoreCase("Chuy·ªÉn kho·∫£n")) { // D√πng equalsIgnoreCase
                    ghiChu = "ƒê√£ x√°c nh·∫≠n"; // Ho·∫∑c logic kh√°c t√πy y√™u c·∫ßu
                }

                try {
                    // Th√™m d√≤ng m·ªõi v√†o tableModel
                    tableModel.addRow(new Object[]{
                            (hd.getNgayLap() != null ? hd.getNgayLap().format(tableDateFormatter) : "N/A"), // Format ng√†y gi·ªù
                            maThamChieu,
                            tenNV_Thuc, // Hi·ªÉn th·ªã t√™n NV
                            ghiChu,
                            hd.getHinhThucThanhToan() != null ? hd.getHinhThucThanhToan() : "N/A",
                            currencyFormatter.format(hd.getTongTien()) // Format ti·ªÅn t·ªá
                    });
                } catch (Exception e) {
                    // Ghi log l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ khi th√™m d√≤ng (v√≠ d·ª• d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá)
                    System.err.println("L·ªói khi th√™m d√≤ng cho Hƒê " + maThamChieu + ": " + e.getMessage());
                }
            }
        });
    }

    /**
     * T·∫£i l·∫°i d·ªØ li·ªáu cho tab ƒëang ƒë∆∞·ª£c ch·ªçn.
     */
    private void loadDataForSelectedTab() {
        List<HoaDon> allList = hoaDonDAO.getAllHoaDon(); // L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n
        List<HoaDon> filteredList;

        if (allList == null) allList = new ArrayList<>(); // Tr√°nh NullPointerException

        int selectedIndex = tabbedPane.getSelectedIndex(); // L·∫•y index tab ƒëang ch·ªçn
        switch (selectedIndex) {
            case 1: // Tab "ƒê√£ thanh to√°n"
                filteredList = allList.stream()
                        .filter(hd -> hd != null && "ƒê√£ thanh to√°n".equalsIgnoreCase(hd.getTrangThai())) // L·ªçc theo tr·∫°ng th√°i
                        .collect(Collectors.toList());
                break;
            case 2: // Tab "Ch∆∞a thanh to√°n"
                filteredList = allList.stream()
                        .filter(hd -> hd != null && "Ch∆∞a thanh to√°n".equalsIgnoreCase(hd.getTrangThai())) // L·ªçc theo tr·∫°ng th√°i
                        .collect(Collectors.toList());
                break;
            case 0: // Tab "T·∫•t c·∫£ h√≥a ƒë∆°n"
            default:
                filteredList = allList; // Kh√¥ng l·ªçc
        }

        loadDataToTable(filteredList); // Hi·ªÉn th·ªã danh s√°ch ƒë√£ l·ªçc
        resetSearchFieldIfNeeded(); // Reset √¥ t√¨m ki·∫øm n·∫øu c·∫ßn
    }

    /**
     * Reset √¥ t√¨m ki·∫øm v·ªÅ tr·∫°ng th√°i placeholder n·∫øu n√≥ kh√¥ng ch·ª©a placeholder.
     */
    private void resetSearchFieldIfNeeded() {
        final String placeholder = " T√¨m ki·∫øm qua m√£ h√≥a ƒë∆°n";
        // Ch·ªâ reset n·∫øu n·ªôi dung hi·ªán t·∫°i kh√°c placeholder
        if (!txtTimKiem.getText().equals(placeholder)) {
            // D√πng invokeLater ƒë·ªÉ tr√°nh xung ƒë·ªôt lu·ªìng khi thay ƒë·ªïi DocumentListener
            SwingUtilities.invokeLater(() -> {
                txtTimKiem.getDocument().removeDocumentListener(searchListener); // T·∫°m g·ª° listener
                txtTimKiem.setForeground(Color.GRAY); // ƒê·∫∑t m√†u placeholder
                txtTimKiem.setText(placeholder);      // ƒê·∫∑t text placeholder
                txtTimKiem.getDocument().addDocumentListener(searchListener); // G·∫Øn l·∫°i listener
            });
        }
    }


    /**
     * Th·ª±c hi·ªán t√¨m ki·∫øm khi timer k√≠ch ho·∫°t.
     */
    private void performSearch() {
        // Ch·∫°y t√¨m ki·∫øm tr√™n lu·ªìng EDT
        SwingUtilities.invokeLater(this::searchHoaDonRealTime);
    }

    /**
     * Logic t√¨m ki·∫øm h√≥a ƒë∆°n d·ª±a tr√™n t·ª´ kh√≥a nh·∫≠p v√†o √¥ t√¨m ki·∫øm.
     */
    private void searchHoaDonRealTime() {
        final String currentText = txtTimKiem.getText();
        final String placeholder = " T√¨m ki·∫øm qua m√£ h√≥a ƒë∆°n";

        if (currentText == null) return; // Tho√°t n·∫øu text l√† null

        String query = currentText.trim().toLowerCase(); // L·∫•y t·ª´ kh√≥a, b·ªè kho·∫£ng tr·∫Øng th·ª´a, chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng

        // N·∫øu √¥ t√¨m ki·∫øm tr·ªëng ho·∫∑c l√† placeholder, t·∫£i l·∫°i d·ªØ li·ªáu c·ªßa tab hi·ªán t·∫°i
        if (query.isEmpty() || query.equals(placeholder.trim().toLowerCase())) {
            loadDataForSelectedTab();
            return;
        }

        // L·∫•y danh s√°ch h√≥a ƒë∆°n g·ªëc c·ªßa tab hi·ªán t·∫°i
        List<HoaDon> baseListForTab = getCurrentTabBaseList();
        // L·ªçc danh s√°ch g·ªëc d·ª±a tr√™n t·ª´ kh√≥a (t√¨m theo m√£ HD)
        List<HoaDon> searchResult = baseListForTab.stream()
                .filter(hd -> hd != null && hd.getMaHD() != null && hd.getMaHD().toLowerCase().contains(query)) // L·ªçc theo m√£ HD ch·ª©a query
                .collect(Collectors.toList());

        loadDataToTable(searchResult); // Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
    }

    /**
     * Helper: L·∫•y danh s√°ch h√≥a ƒë∆°n g·ªëc t∆∞∆°ng ·ª©ng v·ªõi tab ƒëang ƒë∆∞·ª£c ch·ªçn.
     */
    private List<HoaDon> getCurrentTabBaseList() {
        int selectedIndex = tabbedPane.getSelectedIndex();
        List<HoaDon> allList = hoaDonDAO.getAllHoaDon(); // L·∫•y t·∫•t c·∫£ Hƒê t·ª´ DB
        if (allList == null) allList = new ArrayList<>(); // Tr√°nh NullPointerException

        switch (selectedIndex) {
            case 1: // Tab "ƒê√£ thanh to√°n"
                return allList.stream()
                        .filter(hd -> hd != null && "ƒê√£ thanh to√°n".equalsIgnoreCase(hd.getTrangThai()))
                        .collect(Collectors.toList());
            case 2: // Tab "Ch∆∞a thanh to√°n"
                return allList.stream()
                        .filter(hd -> hd != null && "Ch∆∞a thanh to√°n".equalsIgnoreCase(hd.getTrangThai()))
                        .collect(Collectors.toList());
            case 0: // Tab "T·∫•t c·∫£"
            default:
                return allList; // Tr·∫£ v·ªÅ to√†n b·ªô danh s√°ch
        }
    }

    /**
     * G·∫Øn s·ª± ki·ªán double-click v√†o b·∫£ng ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt h√≥a ƒë∆°n.
     */
    private void addTableClickListener() {
        tableHoaDon.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Ch·ªâ x·ª≠ l√Ω khi double-click
                if (e.getClickCount() == 2) {
                    int selectedRow = tableHoaDon.getSelectedRow(); // L·∫•y d√≤ng ƒëang ch·ªçn
                    if (selectedRow == -1) return; // N·∫øu kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c ch·ªçn th√¨ tho√°t

                    // Ki·ªÉm tra index h·ª£p l·ªá v·ªõi danh s√°ch ƒëang hi·ªÉn th·ªã
                    if (dsHoaDonDisplayed == null || selectedRow >= dsHoaDonDisplayed.size()) {
                        System.err.println("L·ªói: Index d√≤ng ch·ªçn kh√¥ng h·ª£p l·ªá ho·∫∑c danh s√°ch hi·ªÉn th·ªã null.");
                        return;
                    }

                    HoaDon selectedHoaDon = dsHoaDonDisplayed.get(selectedRow); // L·∫•y h√≥a ƒë∆°n t∆∞∆°ng ·ª©ng
                    if (selectedHoaDon == null) {
                        System.err.println("L·ªói: H√≥a ƒë∆°n t·∫°i d√≤ng " + selectedRow + " b·ªã null.");
                        return;
                    }

                    // L·∫•y m√£ ƒë∆°n ƒë·∫∑t h√†ng ƒë·ªÉ truy v·∫•n chi ti·∫øt
                    String maDon = selectedHoaDon.getMaDon();
                    if (maDon == null || maDon.trim().isEmpty()) {
                        JOptionPane.showMessageDialog(HoaDonGUI.this,
                                "H√≥a ƒë∆°n [" + selectedHoaDon.getMaHD() + "] kh√¥ng c√≥ M√£ ƒê∆°n ƒê·∫∑t li√™n k·∫øt.",
                                "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                    // L·∫•y danh s√°ch chi ti·∫øt t·ª´ DAO
                    List<ChiTietHoaDon> chiTietList = chiTietHoaDonDAO.getChiTietTheoMaDon(maDon);
                    // Hi·ªÉn th·ªã dialog chi ti·∫øt
                    showChiTietDialog(selectedHoaDon, chiTietList);
                }
            }
        });
    }

    /**
     * Hi·ªÉn th·ªã JDialog ch·ª©a th√¥ng tin chi ti·∫øt c·ªßa m·ªôt h√≥a ƒë∆°n.
     * @param hoaDon H√≥a ƒë∆°n c·∫ßn hi·ªÉn th·ªã.
     * @param chiTietList Danh s√°ch chi ti·∫øt m√≥n ƒÉn c·ªßa h√≥a ƒë∆°n ƒë√≥.
     */
    private void showChiTietDialog(HoaDon hoaDon, List<ChiTietHoaDon> chiTietList) {
        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ chi ti·∫øt
        if (chiTietList == null || chiTietList.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Kh√¥ng t√¨m th·∫•y chi ti·∫øt m√≥n ƒÉn cho M√£ ƒê∆°n ƒê·∫∑t: " + hoaDon.getMaDon(),
                    "Chi ti·∫øt h√≥a ƒë∆°n", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // --- X√¢y d·ª±ng n·ªôi dung HTML cho JEditorPane ---
        StringBuilder detailsText = new StringBuilder();
        detailsText.append("<html><body style='font-family: Arial; font-size: 11pt;'>"); // ƒê·∫∑t font v√† size ch·ªØ
        detailsText.append("<h2>Chi Ti·∫øt H√≥a ƒê∆°n: ").append(hoaDon.getMaHD()).append("</h2>");
        detailsText.append("<b>Ng√†y l·∫≠p:</b> ").append(hoaDon.getNgayLap() != null ? hoaDon.getNgayLap().format(tableDateFormatter) : "N/A").append("<br>");
        detailsText.append("<b>M√£ ƒê∆°n ƒê·∫∑t:</b> ").append(hoaDon.getMaDon()).append("<br>");
        // L·∫•y t√™n NV t·ª´ m√£ NV
        String tenNV = nhanVienDAO.getTenNhanVienByMa(hoaDon.getMaNV());
        detailsText.append("<b>Nh√¢n vi√™n:</b> ").append(tenNV).append(" (").append(hoaDon.getMaNV()).append(")<br>"); // Hi·ªÉn th·ªã c·∫£ t√™n v√† m√£
        detailsText.append("<br>");

        // B·∫£ng chi ti·∫øt m√≥n ƒÉn
        detailsText.append("<table border='1' cellpadding='5' cellspacing='0' style='border-collapse:collapse; width:100%; font-size: 10pt;'>"); // Gi·∫£m size ch·ªØ b·∫£ng
        detailsText.append("<tr style='background-color:#f0f0f0;'><th>M√£ M√≥n</th><th>T√™n M√≥n</th><th>S·ªë L∆∞·ª£ng</th><th>ƒê∆°n Gi√°</th><th>Th√†nh Ti·ªÅn</th></tr>");

        float tongTienChiTiet = 0;
        for (ChiTietHoaDon ct : chiTietList) {
            if (ct == null) continue;
            String maMon = ct.getMaMon() != null ? ct.getMaMon() : "N/A";
            String tenMon = ct.getTenMon() != null ? ct.getTenMon() : monAnDAO.getTenMonByMa(maMon); // ∆Øu ti√™n t√™n t·ª´ chi ti·∫øt, n·∫øu kh√¥ng c√≥ m·ªõi l·∫•y t·ª´ DAO
            float thanhTien = ct.getThanhtien();
            tongTienChiTiet += thanhTien;

            detailsText.append("<tr>");
            detailsText.append("<td>").append(maMon).append("</td>");
            detailsText.append("<td>").append(tenMon).append("</td>"); // Hi·ªÉn th·ªã t√™n m√≥n
            detailsText.append("<td align='right'>").append(ct.getSoluong()).append("</td>");
            detailsText.append("<td align='right'>").append(currencyFormatter.format(ct.getDongia())).append("</td>");
            detailsText.append("<td align='right'>").append(currencyFormatter.format(thanhTien)).append("</td>");
            detailsText.append("</tr>");
        }
        detailsText.append("</table><br>");

        detailsText.append("<b>T·ªïng ti·ªÅn (t·ª´ chi ti·∫øt): ").append(currencyFormatter.format(tongTienChiTiet)).append("</b><br>");

        // So s√°nh t·ªïng ti·ªÅn chi ti·∫øt v·ªõi t·ªïng ti·ªÅn tr√™n h√≥a ƒë∆°n (n·∫øu kh√°c bi·ªát)
        if (Math.abs(tongTienChiTiet - hoaDon.getTongTien()) > 1) { // Cho ph√©p sai s·ªë nh·ªè
            detailsText.append("<b style='color:red;'>L∆∞u √Ω: T·ªïng ti·ªÅn chi ti·∫øt kh√°c t·ªïng ti·ªÅn h√≥a ƒë∆°n (")
                    .append(currencyFormatter.format(hoaDon.getTongTien())).append(")</b><br>");
        }
        // Hi·ªÉn th·ªã gi·∫£m gi√° v√† t·ªïng thanh to√°n
        detailsText.append("<b>Gi·∫£m gi√°:</b> ").append(currencyFormatter.format(hoaDon.getGiamGia())).append("<br>");
        detailsText.append("<b>VAT:</b> ").append(currencyFormatter.format(hoaDon.getVat())).append("<br>"); // Gi·∫£ s·ª≠ c√≥ getVat()
        detailsText.append("<b>T·ªïng thanh to√°n:</b> ").append(currencyFormatter.format(hoaDon.getTongThanhToan())).append("<br><br>");


        // Th√¥ng tin thanh to√°n
        detailsText.append("<b>Tr·∫°ng th√°i Hƒê:</b> ").append(hoaDon.getTrangThai() != null ? hoaDon.getTrangThai() : "N/A").append("<br>");
        detailsText.append("<b>H√¨nh th·ª©c TT:</b> ").append(hoaDon.getHinhThucThanhToan() != null ? hoaDon.getHinhThucThanhToan() : "N/A").append("<br>");
        // Ch·ªâ hi·ªÉn th·ªã ti·ªÅn kh√°ch ƒë∆∞a/th·ªëi n·∫øu ƒë√£ thanh to√°n
        if ("ƒê√£ thanh to√°n".equalsIgnoreCase(hoaDon.getTrangThai())) {
            detailsText.append("<b>Ti·ªÅn kh√°ch ƒë∆∞a:</b> ").append(currencyFormatter.format(hoaDon.getTienKhachDua())).append("<br>");
            detailsText.append("<b>Ti·ªÅn th·ªëi:</b> ").append(currencyFormatter.format(hoaDon.getTienThoi())).append("<br>");
        }
        detailsText.append("</body></html>");

        // --- Hi·ªÉn th·ªã n·ªôi dung HTML trong JDialog ---
        JEditorPane editorPane = new JEditorPane("text/html", detailsText.toString());
        editorPane.setEditable(false); // Kh√¥ng cho s·ª≠a
        editorPane.setBackground(COLOR_BG_LIGHT); // M√†u n·ªÅn nh·∫°t

        JScrollPane scrollPane = new JScrollPane(editorPane);
        scrollPane.setPreferredSize(new Dimension(550, 400)); // K√≠ch th∆∞·ªõc dialog

        // Hi·ªÉn th·ªã dialog
        JOptionPane.showMessageDialog(this, scrollPane, "Chi ti·∫øt h√≥a ƒë∆°n " + hoaDon.getMaHD(), JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán xu·∫•t d·ªØ li·ªáu ƒëang hi·ªÉn th·ªã tr√™n b·∫£ng ra file Excel.
     */
    private void exportDataToExcel() {
        // L·∫•y danh s√°ch h√≥a ƒë∆°n ƒëang hi·ªÉn th·ªã tr√™n b·∫£ng
        List<HoaDon> listToExport = this.dsHoaDonDisplayed;
        if (listToExport == null || listToExport.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Kh√¥ng c√≥ d·ªØ li·ªáu h√≥a ƒë∆°n ƒë·ªÉ xu·∫•t.", "Th√¥ng b√°o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // --- M·ªü h·ªôp tho·∫°i ch·ªçn n∆°i l∆∞u file ---
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Ch·ªçn n∆°i l∆∞u file Excel");
        // ƒê·∫∑t t√™n file m·∫∑c ƒë·ªãnh c√≥ ng√†y gi·ªù
        DateTimeFormatter fileNameFormat = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
        String defaultFileName = "HoaDon_" + LocalDateTime.now().format(fileNameFormat) + ".xlsx";
        fileChooser.setSelectedFile(new java.io.File(defaultFileName));

        int userSelection = fileChooser.showSaveDialog(this); // Hi·ªÉn th·ªã h·ªôp tho·∫°i l∆∞u

        // N·∫øu ng∆∞·ªùi d√πng ch·ªçn "Save"
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            // ƒê·∫£m b·∫£o file c√≥ ƒëu√¥i .xlsx
            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                filePath += ".xlsx";
            }

            // --- G·ªçi l·ªõp ExcelExporter ƒë·ªÉ th·ª±c hi·ªán xu·∫•t ---
            ExcelExporter exporter = new ExcelExporter();
            boolean success = exporter.exportToExcel(listToExport, filePath); // G·ªçi h√†m xu·∫•t

            // Th√¥ng b√°o k·∫øt qu·∫£
            if (success) {
                JOptionPane.showMessageDialog(this, "Xu·∫•t h√≥a ƒë∆°n th√†nh c√¥ng t·∫°i:\n" + filePath, "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "L·ªói khi xu·∫•t file Excel.", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}