package gui;

import dao.HoaDonDAO;
import entity.HoaDon;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

public class HoaDonGUI extends JPanel {
    private final HoaDonDAO hoaDonDAO;
    private final JTable tableHoaDon;
    private final DefaultTableModel tableModel;
    private final JTabbedPane tabbedPane;
    private JTextField txtTimKiem;

    private static final Color COLOR_BG_LIGHT = new Color(244, 247, 252);
    // V·∫´n gi·ªØ c√°c c·ªôt n√†y ƒë·ªÉ kh·ªõp v·ªõi thi·∫øt k·∫ø giao di·ªán (c·ªôt NV, Ghi ch√∫ s·∫Ω l√† d·ªØ li·ªáu m√¥ ph·ªèng/t·ªïng h·ª£p)
    private final String[] columnNames = {"Th·ªùi gian thanh to√°n", "M√£ tham chi·∫øu", "Nh√¢n vi√™n", "Ghi ch√∫", "Thanh to√°n", "T·ªïng ti·ªÅn"};

    public HoaDonGUI() {
        // Kh·ªüi t·∫°o DAO ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ CSDL
        this.hoaDonDAO = new HoaDonDAO();

        setLayout(new BorderLayout(10, 10));
        setBackground(COLOR_BG_LIGHT);
        setBorder(new EmptyBorder(15, 15, 15, 15));

        // --- 1. Header (Ti√™u ƒë·ªÅ + N√∫t Export) ---
        add(createHeaderPanel(), BorderLayout.NORTH);

        // --- 2. N·ªôi dung ch√≠nh (Tab v√† B·∫£ng) ---
        tabbedPane = createTabbedPane();

        // Kh·ªüi t·∫°o model v√† b·∫£ng
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableHoaDon = new JTable(tableModel);
        setupTable(tableHoaDon);

        // Th√™m c√°c tab
        JScrollPane scrollPane = new JScrollPane(tableHoaDon);
        tabbedPane.addTab("T·∫•t c·∫£ h√≥a ƒë∆°n", createTablePanel(scrollPane));
        // S·ª≠ d·ª•ng l·∫°i scrollPane v√¨ d·ªØ li·ªáu ƒë∆∞·ª£c load dynamically v√†o c√πng m·ªôt tableModel
        tabbedPane.addTab("ƒê√£ thanh to√°n", createTablePanel(scrollPane));
        tabbedPane.addTab("Ch·ªù x√°c nh·∫≠n thanh to√°n", createTablePanel(scrollPane));

        // Th√™m s·ª± ki·ªán chuy·ªÉn tab
        tabbedPane.addChangeListener(e -> loadDataForSelectedTab());

        add(tabbedPane, BorderLayout.CENTER);

        // Load d·ªØ li·ªáu l·∫ßn ƒë·∫ßu ti√™n (Tab "T·∫•t c·∫£ h√≥a ƒë∆°n")
        loadDataToTable(hoaDonDAO.getAllHoaDon());
    }

    /**
     * T·∫°o Panel ch·ª©a ti√™u ƒë·ªÅ v√† n√∫t Xu·∫•t h√≥a ƒë∆°n.
     */
    private JPanel createHeaderPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setOpaque(false);
        panel.setBorder(new EmptyBorder(0, 0, 10, 0));

        // 1. Ti√™u ƒë·ªÅ
        JLabel titleLabel = new JLabel("H√≥a ƒë∆°n");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        panel.add(titleLabel, BorderLayout.WEST);

        // 2. N√∫t Xu·∫•t h√≥a ƒë∆°n (V·ªõi Icon Image v√† Text)

        // üí° B∆Ø·ªöC 1: T·∫£i Icon Excel
        // ƒê·∫£m b·∫£o file "excel_icon.png" n·∫±m trong th∆∞ m·ª•c resources ho·∫∑c c√πng c·∫•p v·ªõi class file
        // V√≠ d·ª•: new ImageIcon(getClass().getResource("/images/excel_icon.png"));
        // T√¥i s·∫Ω d√πng ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi, b·∫°n c·∫ßn ƒë·∫∑t file ·∫£nh ph√π h·ª£p.
        ImageIcon originalIcon = null;
        try {
            originalIcon = new ImageIcon(getClass().getResource("/img/icon_excel/excel.png")); // ƒê·ªïi ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn
            if (originalIcon.getImageLoadStatus() != MediaTracker.COMPLETE) {
                System.err.println("L·ªói t·∫£i ·∫£nh Excel: ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n v√† file ·∫£nh ƒë√∫ng.");
                // Fallback n·∫øu ·∫£nh kh√¥ng t·∫£i ƒë∆∞·ª£c
                originalIcon = null;
            }
        } catch (Exception e) {
            System.err.println("Kh√¥ng t√¨m th·∫•y file icon Excel: " + e.getMessage());
            originalIcon = null; // ƒê·∫∑t null ƒë·ªÉ x·ª≠ l√Ω n·∫øu kh√¥ng c√≥ icon
        }

        // üí° B∆Ø·ªöC 2: T·∫°o JButton v√† t√πy ch·ªânh
        JButton btnExport = new JButton("Xu·∫•t h√≥a ƒë∆°n");

        if (originalIcon != null) {
            // Thay ƒë·ªïi k√≠ch th∆∞·ªõc icon ƒë·ªÉ ph√π h·ª£p (v√≠ d·ª•: cao 24px)
            // K√≠ch th∆∞·ªõc n√∫t trong ·∫£nh tr√¥ng kh√° nh·ªè, icon c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c scale
            Image scaledImage = originalIcon.getImage().getScaledInstance(24, 24, Image.SCALE_SMOOTH);
            ImageIcon scaledIcon = new ImageIcon(scaledImage);
            btnExport.setIcon(scaledIcon);

            // ƒê·∫∑t v·ªã tr√≠ icon ·ªü b√™n tr√°i c·ªßa text
            btnExport.setHorizontalTextPosition(SwingConstants.RIGHT);
            btnExport.setVerticalTextPosition(SwingConstants.CENTER);
            btnExport.setIconTextGap(8); // Kho·∫£ng c√°ch gi·ªØa icon v√† text
        } else {
            // N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c icon, ch·ªâ hi·ªÉn th·ªã text
            btnExport.setText("Xu·∫•t h√≥a ƒë∆°n (L·ªói t·∫£i icon)");
        }

        btnExport.setBackground(new Color(0, 150, 60)); // M√†u n·ªÅn xanh l√°
        btnExport.setForeground(Color.WHITE); // M√†u ch·ªØ
        btnExport.setFont(new Font("Arial", Font.BOLD, 14)); // Font c·ªßa text
        btnExport.setFocusPainted(false);
        btnExport.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // T·∫°o border m√†u xanh l√° nh·∫°t h∆°n cho n√∫t
        btnExport.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(0, 180, 80), 1), // Border ngo√†i (m√†u xanh l√° nh·∫°t)
                new EmptyBorder(8, 15, 8, 15) // Padding n·ªôi dung
        ));
        btnExport.setContentAreaFilled(true); // ƒê·∫£m b·∫£o m√†u n·ªÅn ƒë∆∞·ª£c t√¥

        btnExport.addActionListener(e -> JOptionPane.showMessageDialog(this, "Ch·ª©c nƒÉng Xu·∫•t h√≥a ƒë∆°n ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai!", "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE));

        panel.add(btnExport, BorderLayout.EAST);

        return panel;
    }

    /**
     * T·∫°o JTabbedPane cho c√°c tr·∫°ng th√°i h√≥a ƒë∆°n.
     */
    private JTabbedPane createTabbedPane() {
        JTabbedPane tabPane = new JTabbedPane();
        tabPane.setFont(new Font("Arial", Font.BOLD, 14));
        tabPane.setBackground(Color.WHITE);
        return tabPane;
    }

    /**
     * T·∫°o Panel ch√≠nh ch·ª©a thanh t√¨m ki·∫øm v√† b·∫£ng.
     */
    private JPanel createTablePanel(JScrollPane scrollPane) {
        JPanel panel = new JPanel(new BorderLayout(0, 10));
        panel.setOpaque(false);

        // 1. Panel t√¨m ki·∫øm
        JPanel searchPanel = new JPanel(new BorderLayout(10, 0));
        searchPanel.setBorder(new EmptyBorder(10, 0, 10, 0));
        searchPanel.setOpaque(false);

        txtTimKiem = new JTextField(" T√¨m ki·∫øm qua m√£ h√≥a ƒë∆°n/ t√™n ƒë∆°n h√†ng");
        txtTimKiem.setFont(new Font("Arial", Font.PLAIN, 14));
        txtTimKiem.setForeground(Color.GRAY);
        txtTimKiem.setPreferredSize(new Dimension(0, 35));
        txtTimKiem.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));

        // X·ª≠ l√Ω Placeholder
        txtTimKiem.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (txtTimKiem.getText().trim().equals(" T√¨m ki·∫øm qua m√£ h√≥a ƒë∆°n/ t√™n ƒë∆°n h√†ng")) {
                    txtTimKiem.setText("");
                    txtTimKiem.setForeground(Color.BLACK);
                }
            }
        });
        txtTimKiem.addActionListener(e -> searchHoaDon(txtTimKiem.getText()));

        // Icon t√¨m ki·∫øm
        JLabel searchIcon = new JLabel("üîé");
        searchIcon.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 16));
        JPanel inputWrapper = new JPanel(new BorderLayout(5, 0));
        inputWrapper.add(searchIcon, BorderLayout.WEST);
        inputWrapper.add(txtTimKiem, BorderLayout.CENTER);
        searchPanel.add(inputWrapper, BorderLayout.CENTER);

        panel.add(searchPanel, BorderLayout.NORTH);

        // 2. B·∫£ng h√≥a ƒë∆°n
        // L∆∞u √Ω: Ch·ªâ th√™m scrollPane v√†o panel, kh√¥ng th√™m table tr·ª±c ti·∫øp nhi·ªÅu l·∫ßn
        if (scrollPane.getParent() == null) {
            panel.add(scrollPane, BorderLayout.CENTER);
        }

        scrollPane.getViewport().setBackground(Color.WHITE);
        scrollPane.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY, 1));

        // 3. Ph√¢n trang
        JLabel lblPagination = new JLabel("1 / X trang"); // C·∫ßn c·∫≠p nh·∫≠t ƒë·ªông
        lblPagination.setBorder(new EmptyBorder(10, 0, 0, 0));
        panel.add(lblPagination, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * C√†i ƒë·∫∑t c√°c thu·ªôc t√≠nh hi·ªÉn th·ªã cho b·∫£ng.
     */
    private void setupTable(JTable table) {
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));
        table.getTableHeader().setBackground(new Color(230, 230, 230));
        table.getTableHeader().setReorderingAllowed(false);
        table.setRowHeight(30);
        table.setFont(new Font("Arial", Font.PLAIN, 13));
        table.setShowGrid(true);
        table.setGridColor(new Color(230, 230, 230));
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // C√†i ƒë·∫∑t chi·ªÅu r·ªông c·ªôt
        TableColumnModel tcm = table.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(150); // Th·ªùi gian
        tcm.getColumn(1).setPreferredWidth(100); // M√£
        tcm.getColumn(2).setPreferredWidth(100); // Nh√¢n vi√™n (M√¥ ph·ªèng)
        tcm.getColumn(3).setPreferredWidth(200); // Ghi ch√∫ (M√¥ ph·ªèng)
        tcm.getColumn(4).setPreferredWidth(100); // Thanh to√°n
        tcm.getColumn(5).setPreferredWidth(100); // T·ªïng ti·ªÅn
    }

    /**
     * Load d·ªØ li·ªáu t·ª´ List<HoaDon> v√†o JTable.
     */
    private void loadDataToTable(List<HoaDon> list) {
        tableModel.setRowCount(0);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        for (HoaDon hd : list) {
            String maThamChieu = hd.getMaHD();

            // üí° M√î PH·ªéNG D·ªÆ LI·ªÜU KH√îNG C√ì TRONG ENTITY HOA DON:
            // T√™n Nh√¢n vi√™n (Trong th·ª±c t·∫ø c·∫ßn l·∫•y t·ª´ DonDatMon ho·∫∑c NhanVienDAO)
            String tenNV_Moc = (maThamChieu.hashCode() % 2 == 0) ? "Hu·ª≥nh Qu·ªëc Huy" : "Nguy·ªÖn VƒÉn A";

            // Ghi ch√∫ (Trong th·ª±c t·∫ø c·∫ßn l·∫•y t·ª´ DonDatMon ho·∫∑c ChiTietHoaDon)
            String ghiChu = "Kh√¥ng";
            if (hd.getTongTien() > 1000000) ghiChu = "Y√™u c·∫ßu xu·∫•t VAT";
            else if (hd.getHinhThucThanhToan().equals("Chuy·ªÉn kho·∫£n")) ghiChu = "ƒê√£ x√°c nh·∫≠n";

            tableModel.addRow(new Object[]{
                    hd.getNgayLap().format(formatter),
                    maThamChieu,
                    tenNV_Moc,
                    ghiChu,
                    hd.getHinhThucThanhToan(),
                    String.format("%,.0f ‚Ç´", hd.getTongTien())
            });
        }
    }

    /**
     * L·ªçc d·ªØ li·ªáu hi·ªÉn th·ªã d·ª±a tr√™n tab ƒëang ch·ªçn.
     */
    private void loadDataForSelectedTab() {
        int selectedIndex = tabbedPane.getSelectedIndex();
        List<HoaDon> allList = hoaDonDAO.getAllHoaDon(); // L·∫•y t·∫•t c·∫£ t·ª´ CSDL
        List<HoaDon> list;

        switch (selectedIndex) {
            case 0: // T·∫•t c·∫£ h√≥a ƒë∆°n
                list = allList;
                break;
            case 1: // ƒê√£ thanh to√°n
                list = allList.stream()
                        .filter(hd -> hd.getTrangThai().equals("ƒê√£ thanh to√°n"))
                        .collect(Collectors.toList());
                break;
            case 2: // Ch·ªù x√°c nh·∫≠n thanh to√°n (Ch∆∞a thanh to√°n & Chuy·ªÉn kho·∫£n)
                list = allList.stream()
                        .filter(hd -> hd.getTrangThai().equals("Ch∆∞a thanh to√°n") && hd.getHinhThucThanhToan().equals("Chuy·ªÉn kho·∫£n"))
                        .collect(Collectors.toList());
                break;
            default:
                list = allList;
        }

        loadDataToTable(list);
    }

    /**
     * T√¨m ki·∫øm h√≥a ƒë∆°n d·ª±a tr√™n t·ª´ kh√≥a.
     */
    private void searchHoaDon(String query) {
        if (query.equals(" T√¨m ki·∫øm qua m√£ h√≥a ƒë∆°n/ t√™n ƒë∆°n h√†ng") || query.trim().isEmpty()) {
            loadDataForSelectedTab();
            return;
        }

        // T√¨m ki·∫øm theo M√£ HD (theo HoaDonDAO m·ªõi)
        List<HoaDon> searchResult = hoaDonDAO.timHoaDon(query.trim());

        // N·∫øu mu·ªën m√¥ ph·ªèng t√¨m ki·∫øm theo t√™n NV (d√π kh√¥ng c√≥ trong DAO):
        /*
        List<HoaDon> fullList = hoaDonDAO.getAllHoaDon();
        searchResult = fullList.stream()
                .filter(hd -> hd.getMaHD().toLowerCase().contains(query.toLowerCase()) ||
                              "Hu·ª≥nh Qu·ªëc Huy".toLowerCase().contains(query.toLowerCase())) // Gi·∫£ ƒë·ªãnh t√™n
                .collect(Collectors.toList());
        */

        loadDataToTable(searchResult);
    }
}