package gui;

import dao.DanhMucMonDAO; // DAO m·ªõi ƒë·ªÉ l·∫•y danh m·ª•c
import dao.MonAnDAO;
import entity.DanhMucMon; // Entity m·ªõi
import entity.MonAn;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

public class DanhMucMonGUI extends JPanel {

    // --- Components ---
    private JPanel pnlMenuItemContainer; // Panel ch·ª©a c√°c MonAnItemPanel
    private JTextField txtTimKiem;
    private JScrollPane scrollPane;
    private JPanel filterButtonPanel; // Panel ch·ª©a c√°c n√∫t l·ªçc

    // --- Data & DAO ---
    private MonAnDAO monAnDAO;
    private DanhMucMonDAO danhMucMonDAO;
    private List<MonAn> dsMonAnFull; // Danh s√°ch t·∫•t c·∫£ m√≥n ƒÉn
    private List<MonAnItemPanel> dsMonAnPanel; // Danh s√°ch c√°c panel item
    private String currentCategoryFilter = "T·∫•t c·∫£"; // M√£ DM ƒëang l·ªçc
    private String currentKeywordFilter = "";      // T·ª´ kh√≥a ƒëang l·ªçc

    // --- Constants ---
    private static final Color COLOR_BACKGROUND = new Color(244, 247, 252);
    private static final Color COLOR_ACCENT_BLUE = new Color(56, 118, 243);

    public DanhMucMonGUI() {
        // Kh·ªüi t·∫°o DAO
        this.monAnDAO = new MonAnDAO();
        this.danhMucMonDAO = new DanhMucMonDAO(); // Kh·ªüi t·∫°o DAO danh m·ª•c

        // Kh·ªüi t·∫°o List
        this.dsMonAnFull = new ArrayList<>();
        this.dsMonAnPanel = new ArrayList<>();

        // C·∫•u h√¨nh Panel ch√≠nh
        setLayout(new BorderLayout(10, 15)); // Kho·∫£ng c√°ch
        setBackground(COLOR_BACKGROUND);
        setBorder(new EmptyBorder(15, 20, 15, 20)); // Padding

        // --- T·∫°o giao di·ªán ---
        add(createHeaderPanel(), BorderLayout.NORTH);
        add(createMenuPanel(), BorderLayout.CENTER);

        // --- T·∫£i d·ªØ li·ªáu ---
        SwingUtilities.invokeLater(() -> {
            loadFilterButtons(); // T·∫£i c√°c n√∫t l·ªçc danh m·ª•c
            loadDataFromDB();    // T·∫£i danh s√°ch m√≥n ƒÉn
        });
    }

    /**
     * T·∫°o panel header ch·ª©a ti√™u ƒë·ªÅ v√† √¥ t√¨m ki·∫øm.
     */
    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout(10, 0));
        headerPanel.setOpaque(false);

        JLabel lblTitle = new JLabel("Danh m·ª•c M√≥n ƒÉn");
        lblTitle.setFont(new Font("Segoe UI", Font.BOLD, 28));
        headerPanel.add(lblTitle, BorderLayout.WEST);

        // --- √î t√¨m ki·∫øm ---
        JPanel searchWrapper = new JPanel(new BorderLayout(5, 0));
        searchWrapper.setOpaque(false);
        searchWrapper.setPreferredSize(new Dimension(300, 38)); // K√≠ch th∆∞·ªõc √¥ t√¨m ki·∫øm

        JLabel searchIcon = new JLabel("üîé");
        searchIcon.setFont(new Font("Segoe UI Symbol", Font.PLAIN, 16));
        searchWrapper.add(searchIcon, BorderLayout.WEST);

        txtTimKiem = new JTextField("T√¨m theo t√™n m√≥n...");
        txtTimKiem.setForeground(Color.GRAY);
        txtTimKiem.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        txtTimKiem.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(220, 220, 220)),
                new EmptyBorder(5, 8, 5, 8)
        ));

        // Placeholder handler
        txtTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (txtTimKiem.getText().equals("T√¨m theo t√™n m√≥n...")) {
                    txtTimKiem.setText("");
                    txtTimKiem.setForeground(Color.BLACK);
                }
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (txtTimKiem.getText().isEmpty()) {
                    txtTimKiem.setText("T√¨m theo t√™n m√≥n...");
                    txtTimKiem.setForeground(Color.GRAY);
                }
            }
        });

        // Search listener
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                currentKeywordFilter = txtTimKiem.getText().trim().toLowerCase();
                filterMonAn(); // G·ªçi h√†m l·ªçc khi g√µ ph√≠m
            }
        });

        searchWrapper.add(txtTimKiem, BorderLayout.CENTER);
        headerPanel.add(searchWrapper, BorderLayout.EAST);

        return headerPanel;
    }

    /**
     * T·∫°o panel trung t√¢m ch·ª©a c√°c n√∫t l·ªçc v√† l∆∞·ªõi m√≥n ƒÉn.
     */
    private JPanel createMenuPanel() {
        JPanel panel = new JPanel(new BorderLayout(0, 10)); // Kho·∫£ng c√°ch gi·ªØa filter v√† l∆∞·ªõi
        panel.setOpaque(false);

        // 1. NORTH: Thanh l·ªçc theo danh m·ª•c
        filterButtonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        filterButtonPanel.setOpaque(false);
        JScrollPane filterScrollPane = new JScrollPane(filterButtonPanel); // Cho ph√©p cu·ªôn ngang n·∫øu nhi·ªÅu n√∫t
        filterScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        filterScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        filterScrollPane.setBorder(null);
        filterScrollPane.setOpaque(false);
        filterScrollPane.getViewport().setOpaque(false);
        filterScrollPane.setPreferredSize(new Dimension(0, 45)); // Set chi·ªÅu cao c·ªë ƒë·ªãnh cho thanh filter
        panel.add(filterScrollPane, BorderLayout.NORTH);

        // 2. CENTER: L∆∞·ªõi hi·ªÉn th·ªã m√≥n ƒÉn (d√πng VerticallyWrappingFlowPanel)
        pnlMenuItemContainer = new VerticallyWrappingFlowPanel(new FlowLayout(FlowLayout.LEFT, 15, 15));
        pnlMenuItemContainer.setBorder(new EmptyBorder(10, 10, 10, 10));

        scrollPane = new JScrollPane(pnlMenuItemContainer);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(220, 220, 220)));
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16); // TƒÉng t·ªëc ƒë·ªô cu·ªôn

        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    /**
     * T·∫£i c√°c n√∫t l·ªçc t·ª´ CSDL (b·∫£ng DanhMucMon).
     */
    private void loadFilterButtons() {
        filterButtonPanel.removeAll(); // X√≥a n√∫t c≈©
        ButtonGroup group = new ButtonGroup();

        // 1. T·∫°o n√∫t "T·∫•t c·∫£"
        JToggleButton btnTatCa = createFilterButton("T·∫•t c·∫£", true);
        btnTatCa.setActionCommand("T·∫•t c·∫£"); // Action command l√† "T·∫•t c·∫£"
        group.add(btnTatCa);
        filterButtonPanel.add(btnTatCa);

        // 2. T·∫°o listener chung
        ActionListener filterListener = e -> {
            currentCategoryFilter = e.getActionCommand(); // L·∫•y maDM (ho·∫∑c "T·∫•t c·∫£")
            filterMonAn(); // L·ªçc l·∫°i m√≥n ƒÉn
        };
        btnTatCa.addActionListener(filterListener);

        // 3. T·∫£i danh m·ª•c t·ª´ DAO
        List<DanhMucMon> dsDanhMuc = danhMucMonDAO.getAllDanhMuc();
        if (dsDanhMuc != null) {
            for (DanhMucMon dm : dsDanhMuc) {
                JToggleButton button = createFilterButton(dm.getTendm(), false); // T√™n hi·ªÉn th·ªã
                button.setActionCommand(dm.getMadm()); // Action command l√† M√£ DM
                button.addActionListener(filterListener);
                group.add(button);
                filterButtonPanel.add(button);
            }
        }

        filterButtonPanel.revalidate();
        filterButtonPanel.repaint();
    }

    /**
     * Helper t·∫°o JToggleButton cho thanh filter.
     */
    private JToggleButton createFilterButton(String text, boolean selected) {
        JToggleButton button = new JToggleButton(text);
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        button.setBorder(new EmptyBorder(5, 15, 5, 15));
        button.setContentAreaFilled(false);
        button.setOpaque(true);

        if (selected) {
            button.setBackground(COLOR_ACCENT_BLUE);
            button.setForeground(Color.WHITE);
        } else {
            button.setBackground(Color.WHITE);
            button.setForeground(Color.BLACK);
            button.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.LIGHT_GRAY),
                    new EmptyBorder(4, 14, 4, 14)
            ));
        }

        // Listener ƒë·ªïi m√†u khi ƒë∆∞·ª£c ch·ªçn/b·ªè ch·ªçn
        button.addChangeListener(e -> {
            if (button.isSelected()) {
                button.setBackground(COLOR_ACCENT_BLUE);
                button.setForeground(Color.WHITE);
                button.setBorder(new EmptyBorder(5, 15, 5, 15));
            } else {
                button.setBackground(Color.WHITE);
                button.setForeground(Color.BLACK);
                button.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(Color.LIGHT_GRAY),
                        new EmptyBorder(4, 14, 4, 14)
                ));
            }
        });
        button.setSelected(selected);
        return button;
    }


    /**
     * T·∫£i d·ªØ li·ªáu m√≥n ƒÉn t·ª´ CSDL v√† t·∫°o c√°c MonAnItemPanel.
     */
    private void loadDataFromDB() {
        // 1. T·∫£i danh s√°ch t·ª´ DAO (ƒê√£ s·ª≠a l·ªói k·∫øt n·ªëi)
        this.dsMonAnFull = monAnDAO.getAllMonAn();
        System.out.println("DanhMucMonGUI: ƒê√£ t·∫£i " + dsMonAnFull.size() + " m√≥n ƒÉn t·ª´ CSDL.");

        // 2. T·∫°o c√°c Panel Item
        pnlMenuItemContainer.removeAll(); // X√≥a c√°c item c≈©
        dsMonAnPanel.clear(); // X√≥a danh s√°ch panel c≈©

        if (dsMonAnFull.isEmpty()) {
            pnlMenuItemContainer.add(new JLabel("Kh√¥ng c√≥ m√≥n ƒÉn n√†o trong CSDL."));
        } else {
            for (MonAn mon : dsMonAnFull) {
                MonAnItemPanel itemPanel = new MonAnItemPanel(mon); // D√πng class b·∫°n ƒë√£ cung c·∫•p

                // --- (T√πy ch·ªçn) Th√™m s·ª± ki·ªán click n·∫øu Qu·∫£n l√Ω mu·ªën S·ª≠a/X√≥a m√≥n ---
                itemPanel.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2) {
                            // V√≠ d·ª•: M·ªü dialog s·ª≠a m√≥n
                            System.out.println("Double clicked: " + mon.getTenMon());
                            // showEditMonAnDialog(mon); // C·∫ßn t·∫°o h√†m n√†y
                        }
                    }
                });
                // ---------------------------------------------------------------

                dsMonAnPanel.add(itemPanel);      // Th√™m v√†o list qu·∫£n l√Ω
                pnlMenuItemContainer.add(itemPanel); // Th√™m v√†o panel hi·ªÉn th·ªã
            }
        }

        // L·ªçc hi·ªÉn th·ªã theo danh m·ª•c m·∫∑c ƒë·ªãnh ban ƒë·∫ßu ("T·∫•t c·∫£")
        filterMonAn();

        pnlMenuItemContainer.revalidate();
        pnlMenuItemContainer.repaint();
    }

    /**
     * L·ªçc v√† hi·ªÉn th·ªã c√°c m√≥n ƒÉn d·ª±a tr√™n filter danh m·ª•c v√† t·ª´ kh√≥a.
     */
    private void filterMonAn() {
        System.out.println("Filtering: Category='" + currentCategoryFilter + "', Keyword='" + currentKeywordFilter + "'");

        boolean found = false;
        for (MonAnItemPanel itemPanel : dsMonAnPanel) {
            MonAn mon = itemPanel.getMonAn();
            boolean show = true;

            // 1. L·ªçc theo Danh m·ª•c
            if (!currentCategoryFilter.equals("T·∫•t c·∫£")) {
                if (mon.getMaDM() == null || !mon.getMaDM().equals(currentCategoryFilter)) {
                    show = false;
                }
            }

            // 2. L·ªçc theo T·ª´ kh√≥a (ch·ªâ l·ªçc n·∫øu show v·∫´n l√† true)
            if (show && !currentKeywordFilter.isEmpty()) {
                if (!mon.getTenMon().toLowerCase().contains(currentKeywordFilter)) {
                    show = false;
                }
            }

            itemPanel.setVisible(show); // ·∫®n ho·∫∑c hi·ªán panel
            if (show) {
                found = true;
            }
        }

        // (T√πy ch·ªçn) Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
        // C·∫ßn th√™m/x√≥a JLabel n√†y m·ªôt c√°ch c·∫©n th·∫≠n
        // if (!found) { ... }

        // C·∫≠p nh·∫≠t l·∫°i layout sau khi ·∫©n/hi·ªán
        pnlMenuItemContainer.revalidate();
        pnlMenuItemContainer.repaint();
        // Cu·ªôn l√™n ƒë·∫ßu
        SwingUtilities.invokeLater(() -> scrollPane.getVerticalScrollBar().setValue(0));
    }

}